/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 61 generated on 2016-04-19 20:59:47.751149
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==61);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)2e-6)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.000005)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64;
x0=IKcos(j[5]);
x1=IKsin(j[3]);
x2=IKsin(j[1]);
x3=IKcos(j[0]);
x4=(x2*x3);
x5=(x1*x4);
x6=IKcos(j[3]);
x7=IKsin(j[0]);
x8=IKsin(j[2]);
x9=(x7*x8);
x10=((1.0)*x9);
x11=IKcos(j[1]);
x12=IKcos(j[2]);
x13=(x12*x3);
x14=(x11*x13);
x15=(x6*((x14+(((-1.0)*(1.0)*x10)))));
x16=IKsin(j[5]);
x17=IKsin(j[4]);
x18=(x12*x7);
x19=((1.0)*x18);
x20=(x3*x8);
x21=((1.0)*x20);
x22=(x17*(((((-1.0)*(1.0)*x19))+(((-1.0)*(1.0)*x11*x21)))));
x23=IKcos(j[4]);
x24=(x4*x6);
x25=((1.0)*x13);
x26=(((x1*((x10+(((-1.0)*(1.0)*x11*x25))))))+x24);
x27=(x23*x26);
x28=(x22+x27);
x29=IKcos(j[6]);
x30=((1.0)*x23);
x31=(x11*x20);
x32=((1.0)*x17);
x33=(((x30*(((((-1.0)*(1.0)*x31))+(((-1.0)*(1.0)*x18))))))+(((-1.0)*(1.0)*x26*x32)));
x34=IKsin(j[6]);
x35=(x16*(((((-1.0)*(1.0)*x5))+(((-1.0)*(1.0)*x15)))));
x36=(x0*x28);
x37=((0.27275298994736)*x2);
x38=(x2*x7);
x39=(x1*x38);
x40=(x11*x18);
x41=(x6*((x20+x40)));
x42=(x17*((x25+(((-1.0)*(1.0)*x10*x11)))));
x43=(x38*x6);
x44=(((x1*(((((-1.0)*(1.0)*x11*x19))+(((-1.0)*(1.0)*x21))))))+x43);
x45=(x23*x44);
x46=(x42+x45);
x47=(x11*x9);
x48=(((x30*((x25+(((-1.0)*(1.0)*x47))))))+(((-1.0)*(1.0)*x32*x44)));
x49=(x16*(((((-1.0)*(1.0)*x39))+(((-1.0)*(1.0)*x41)))));
x50=(x0*x46);
x51=(x1*x11);
x52=(x12*x2*x6);
x53=((1.0)*x52);
x54=(x2*x8);
x55=(x17*x54);
x56=(x11*x6);
x57=(x12*x2);
x58=(x1*x57);
x59=(x58+x56);
x60=(x23*x59);
x61=(x60+x55);
x62=(((x30*x54))+(((-1.0)*(1.0)*x32*x59)));
x63=(x16*(((((-1.0)*(1.0)*x51))+x53)));
x64=(x0*x61);
eerot[0]=(((x16*x28))+((x0*((x15+x5)))));
eerot[1]=(((x29*x33))+((x34*(((((-1.0)*(1.0)*x35))+(((-1.0)*(1.0)*x36)))))));
eerot[2]=(((x33*x34))+((x29*((x36+x35)))));
eetrans[0]=((((0.27)*x5))+((x0*(((((0.148)*x15))+(((0.148)*x5))))))+((x3*x37))+((x1*(((((-1.0)*(0.06)*x14))+(((0.06)*x9))))))+(((0.00026931)*x18))+(((0.06)*x24))+(((0.085)*x14))+((x16*(((((0.148)*x22))+(((0.148)*x27))))))+(((-1.0)*(0.085)*x9))+((x6*(((((-1.0)*(0.27)*x9))+(((0.27)*x14))))))+(((0.00026931)*x31)));
eerot[3]=(((x0*((x39+x41))))+((x16*x46)));
eerot[4]=(((x34*(((((-1.0)*(1.0)*x49))+(((-1.0)*(1.0)*x50))))))+((x29*x48)));
eerot[5]=(((x34*x48))+((x29*((x49+x50)))));
eetrans[1]=((((0.06)*x43))+((x0*(((((0.148)*x39))+(((0.148)*x41))))))+(((0.085)*x40))+(((0.085)*x20))+((x6*(((((0.27)*x40))+(((0.27)*x20))))))+((x1*(((((-1.0)*(0.06)*x40))+(((-1.0)*(0.06)*x20))))))+(((0.00026931)*x47))+(((0.27)*x39))+((x16*(((((0.148)*x42))+(((0.148)*x45))))))+((x37*x7))+(((-1.0)*(0.00026931)*x13)));
eerot[6]=(((x0*(((((-1.0)*(1.0)*x53))+x51))))+((x16*x61)));
eerot[7]=(((x29*x62))+((x34*(((((-1.0)*(1.0)*x64))+(((-1.0)*(1.0)*x63)))))));
eerot[8]=(((x29*((x64+x63))))+((x34*x62)));
eetrans[2]=((0.3125)+(((0.27)*x51))+(((0.06)*x56))+((x16*(((((0.148)*x55))+(((0.148)*x60))))))+(((0.27275298994736)*x11))+((x0*(((((-1.0)*(0.148)*x52))+(((0.148)*x51))))))+(((-1.0)*(0.00026931)*x54))+(((-1.0)*(0.27)*x52))+(((-1.0)*(0.085)*x57))+(((0.06)*x58)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {6}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,j6,cj6,sj6,htj6,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1;  _ij6[0] = -1; _ij6[1] = -1; _nj6 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j6=pfree[0]; cj6=cos(pfree[0]); sj6=sin(pfree[0]), htj6=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*(((1.0)*r01)));
new_r01=r02;
new_r02=((-1.0)*(((1.0)*r00)));
new_px=(px+(((-1.0)*(0.148)*r00)));
new_r10=((-1.0)*(((1.0)*r11)));
new_r11=r12;
new_r12=((-1.0)*(((1.0)*r10)));
new_py=((((-1.0)*(0.148)*r10))+py);
new_r20=((-1.0)*(((1.0)*r21)));
new_r21=r22;
new_r22=((-1.0)*(((1.0)*r20)));
new_pz=((-0.3125)+(((-1.0)*(0.148)*r20))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x65=((1.0)*py);
IkReal x66=((1.0)*pz);
IkReal x67=((1.0)*px);
pp=((pz*pz)+(py*py)+(px*px));
npx=(((pz*r20))+((py*r10))+((px*r00)));
npy=(((pz*r21))+((py*r11))+((px*r01)));
npz=(((px*r02))+((pz*r22))+((py*r12)));
rxp0_0=(((pz*r10))+(((-1.0)*r20*x65)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x66)));
rxp0_2=(((py*r00))+(((-1.0)*r10*x67)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x66)));
rxp1_2=((((-1.0)*r11*x67))+((py*r01)));
rxp2_0=((((-1.0)*r22*x65))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x66))+((px*r22)));
rxp2_2=((((-1.0)*r12*x67))+((py*r02)));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
if( (((-1.00052495893541)+(((6.32766002467661)*pp)))) < -1-IKFAST_SINCOS_THRESH || (((-1.00052495893541)+(((6.32766002467661)*pp)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x68=IKasin(((-1.00052495893541)+(((6.32766002467661)*pp))));
j3array[0]=((2.62082499748496)+(((-1.0)*x68)));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
j3array[1]=((5.76241765107476)+x68);
sj3array[1]=IKsin(j3array[1]);
cj3array[1]=IKcos(j3array[1]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
if( j3array[1] > IKPI )
{
    j3array[1]-=IK2PI;
}
else if( j3array[1] < -IKPI )
{    j3array[1]+=IK2PI;
}
j3valid[1] = true;
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal j4eval[1];
j4eval[0]=((1.0)+(((-1.0)*(2.83327625235861)*sj3))+(((9.09158316679603)*cj3))+(((-1.0)*(12.8797428196277)*cj3*sj3))+(((20.6646374341559)*(cj3*cj3)))+(((2.00690401208735)*(sj3*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x69=(npx*sj6);
j5eval[0]=((IKabs((x69+((cj6*npy)))))+(IKabs(npz)));
j5eval[1]=((((2.0)*cj6*npy*x69))+(((cj6*cj6)*(npy*npy)))+(npz*npz)+(((npx*npx)*(sj6*sj6))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4, j5]

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x70=(((cj6*npy))+((npx*sj6)));
CheckValue<IkReal> x73 = IKatan2WithCheck(IkReal(npz),x70,IKFAST_ATAN2_MAGTHRESH);
if(!x73.valid){
continue;
}
IkReal x71=((-1.0)*(x73.value));
if((((x70*x70)+(npz*npz))) < -0.00001)
continue;
CheckValue<IkReal> x74=IKPowWithIntegerCheck(IKabs(IKsqrt(((x70*x70)+(npz*npz)))),-1);
if(!x74.valid){
continue;
}
if( (((x74.value)*(((0.27)+(((0.27275298994736)*sj3))+(((0.085)*cj3)))))) < -1-IKFAST_SINCOS_THRESH || (((x74.value)*(((0.27)+(((0.27275298994736)*sj3))+(((0.085)*cj3)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x72=IKasin(((x74.value)*(((0.27)+(((0.27275298994736)*sj3))+(((0.085)*cj3))))));
j5array[0]=(x71+(((-1.0)*x72)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+x71+x72);
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x75=(cj3*sj3);
IkReal x76=cj3*cj3;
j4eval[0]=((1.06128162038001)+(((3.20885870526306)*cj3))+(((-4.54588316578933)*x75))+(((-1.0)*(1.0)*sj3))+(((6.58521505149261)*x76)));
j4eval[1]=IKsign(((108250725278761.0)+(((-1.0)*(102000000000000.0)*sj3))+(((327303587936832.0)*cj3))+(((671691935252246.0)*x76))+(((-463680082910512.0)*x75))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x77=(cj6*npx);
IkReal x78=(npy*sj6);
IkReal x79=(npz*sj5);
IkReal x80=(cj3*npz*sj5);
IkReal x81=(cj5*cj6*npy);
IkReal x82=(cj5*npx*sj6);
IkReal x83=(npz*sj3*sj5);
IkReal x84=(cj3*cj5*cj6*npy);
IkReal x85=(cj3*cj5*npx*sj6);
IkReal x86=(cj5*cj6*npy*sj3);
IkReal x87=(cj5*npx*sj3*sj6);
j4eval[0]=((((-1.0)*x78))+(((315.621402844306)*x87))+(((-222.791578478334)*x81))+(((-222.791578478334)*x82))+(((222.791578478334)*x79))+(((315.621402844306)*x86))+(((-315.621402844306)*x83))+(((-1012.78448608429)*x84))+(((1012.78448608429)*x80))+x77+(((-1012.78448608429)*x85)));
j4eval[1]=IKsign(((((27275298.994736)*x80))+(((-26931.0)*x78))+(((8500000.0)*x86))+(((6000000.0)*x79))+(((26931.0)*x77))+(((-8500000.0)*x83))+(((-6000000.0)*x81))+(((-6000000.0)*x82))+(((8500000.0)*x87))+(((-27275298.994736)*x84))+(((-27275298.994736)*x85))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x88=(cj6*npx);
IkReal x89=(npy*sj6);
IkReal x90=((1012.78448608429)*cj3);
IkReal x91=((1.0)*cj5);
IkReal x92=((315.621402844306)*sj3);
j4eval[0]=(((x88*x92))+((x89*x90))+(((-1.0)*x88*x90))+(((-222.791578478334)*x88))+(((-1.0)*cj6*npy*x91))+(((222.791578478334)*x89))+(((-1.0)*x89*x92))+(((-1.0)*npx*sj6*x91))+((npz*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x93=npy*npy;
IkReal x94=((1.0e+16)*x93);
IkReal x95=(npy*sj6);
IkReal x96=cj6*cj6;
IkReal x97=npx*npx;
IkReal x98=(cj6*npx);
IkReal x99=(npz*sj5);
IkReal x100=(cj3*cj6*npx);
IkReal x101=(cj3*npy*sj6);
IkReal x102=(cj5*cj6*npy);
IkReal x103=(cj5*npx*sj6);
IkReal x104=(cj6*npx*sj3);
IkReal x105=(npy*sj3*sj6);
IkReal x106=(cj5*npx*npy);
IkReal x107=((100000000.0)*npz*sj5);
IkReal x108=((100000000.0)*cj5*cj6*sj6);
CheckValue<IkReal> x109=IKPowWithIntegerCheck(((((-600000000000000.0)*x98))+(((-2.7275298994736e+15)*x100))+(((2.7275298994736e+15)*x101))+(((-2693100000000.0)*x102))+(((600000000000000.0)*x95))+(((2693100000000.0)*x99))+(((-2693100000000.0)*x103))+(((850000000000000.0)*x104))+(((-850000000000000.0)*x105))),-1);
if(!x109.valid){
continue;
}
CheckValue<IkReal> x110=IKPowWithIntegerCheck(((((27275298.994736)*x101))+(((-6000000.0)*x98))+(((-8500000.0)*x105))+(((26931.0)*x99))+(((8500000.0)*x104))+(((6000000.0)*x95))+(((-27275298.994736)*x100))+(((-26931.0)*x103))+(((-26931.0)*x102))),-1);
if(!x110.valid){
continue;
}
if( IKabs(((x109.value)*(((725278761.0)+(((-1.0)*x94))+((x94*x96))+(((-1.0e+16)*x96*x97))+(((2.0e+16)*cj6*npx*x95)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x110.value)*(((-1615.86)+(((-1.0)*x107*x95))+(((2289.135)*sj3))+((x108*x93))+(((-1.0)*x108*x97))+((x107*x98))+(((-1.0)*(7345.51077227235)*cj3))+(((100000000.0)*x106))+(((-200000000.0)*x106*x96)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x109.value)*(((725278761.0)+(((-1.0)*x94))+((x94*x96))+(((-1.0e+16)*x96*x97))+(((2.0e+16)*cj6*npx*x95))))))+IKsqr(((x110.value)*(((-1615.86)+(((-1.0)*x107*x95))+(((2289.135)*sj3))+((x108*x93))+(((-1.0)*x108*x97))+((x107*x98))+(((-1.0)*(7345.51077227235)*cj3))+(((100000000.0)*x106))+(((-200000000.0)*x106*x96))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x109.value)*(((725278761.0)+(((-1.0)*x94))+((x94*x96))+(((-1.0e+16)*x96*x97))+(((2.0e+16)*cj6*npx*x95))))), ((x110.value)*(((-1615.86)+(((-1.0)*x107*x95))+(((2289.135)*sj3))+((x108*x93))+(((-1.0)*x108*x97))+((x107*x98))+(((-1.0)*(7345.51077227235)*cj3))+(((100000000.0)*x106))+(((-200000000.0)*x106*x96))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x111=(npy*sj6);
IkReal x112=((1.0)*cj6);
IkReal x113=(npx*x112);
IkReal x114=IKsin(j4);
IkReal x115=IKcos(j4);
IkReal x116=((0.27275298994736)*cj3);
IkReal x117=((0.085)*sj3);
IkReal x118=(npz*sj5);
IkReal x119=(cj5*npy);
IkReal x120=(x112*x119);
IkReal x121=(cj5*npx*sj6);
IkReal x122=((1.0)*x121);
evalcond[0]=((((-1.0)*x113))+(((0.06)*x114))+(((0.00026931)*x115))+((x114*x116))+(((-1.0)*x114*x117))+x111);
evalcond[1]=((((0.06)*x115))+(((-1.0)*x115*x117))+((x115*x116))+(((-1.0)*x120))+(((-0.00026931)*x114))+(((-1.0)*x122))+x118);
evalcond[2]=((0.00026931)+((cj6*x114*x119))+((x111*x115))+((x114*x121))+(((-1.0)*x114*x118))+(((-1.0)*x113*x115)));
evalcond[3]=((0.06)+((x111*x114))+(((-1.0)*x115*x120))+(((-1.0)*x117))+(((-1.0)*x113*x114))+((x115*x118))+(((-1.0)*x115*x122))+x116);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x598=(cj6*npx);
IkReal x599=(npy*sj6);
IkReal x600=(npz*sj5);
IkReal x601=((27275298.994736)*cj3);
IkReal x602=(cj5*cj6*npy);
IkReal x603=(cj5*npx*sj6);
IkReal x604=((8500000.0)*sj3);
IkReal x605=(cj5*npx*npy);
IkReal x606=((100000000.0)*npz*sj5);
IkReal x607=(cj5*cj6*sj6);
IkReal x608=((100000000.0)*(npx*npx));
IkReal x609=((100000000.0)*(npy*npy));
IkReal x610=cj6*cj6;
CheckValue<IkReal> x611=IKPowWithIntegerCheck(IKsign(((((-6000000.0)*x602))+(((-1.0)*x601*x603))+(((26931.0)*x598))+(((6000000.0)*x600))+(((-1.0)*x601*x602))+((x600*x601))+(((-1.0)*x600*x604))+((x603*x604))+(((-6000000.0)*x603))+((x602*x604))+(((-26931.0)*x599)))),-1);
if(!x611.valid){
continue;
}
CheckValue<IkReal> x612 = IKatan2WithCheck(IkReal(((1615.86)+(((7345.51077227235)*cj3))+((x598*x606))+(((-200000000.0)*x605*x610))+((x607*x609))+(((-1.0)*(2289.135)*sj3))+(((-1.0)*x607*x608))+(((100000000.0)*x605))+(((-1.0)*x599*x606)))),((-1082500.0)+((x608*x610))+(((4636800.82910512)*cj3*sj3))+(((-200000000.0)*cj6*npx*x599))+(((-1.0)*(3273035.87936832)*cj3))+(((-1.0)*x609*x610))+(((-1.0)*(6716919.35252246)*(cj3*cj3)))+x609+(((1020000.0)*sj3))),IKFAST_ATAN2_MAGTHRESH);
if(!x612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x611.value)))+(x612.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x613=(npy*sj6);
IkReal x614=((1.0)*cj6);
IkReal x615=(npx*x614);
IkReal x616=IKsin(j4);
IkReal x617=IKcos(j4);
IkReal x618=((0.27275298994736)*cj3);
IkReal x619=((0.085)*sj3);
IkReal x620=(npz*sj5);
IkReal x621=(cj5*npy);
IkReal x622=(x614*x621);
IkReal x623=(cj5*npx*sj6);
IkReal x624=((1.0)*x623);
evalcond[0]=(x613+(((-1.0)*x615))+((x616*x618))+(((-1.0)*x616*x619))+(((0.06)*x616))+(((0.00026931)*x617)));
evalcond[1]=((((-1.0)*x622))+(((-1.0)*x624))+(((-1.0)*x617*x619))+x620+((x617*x618))+(((0.06)*x617))+(((-0.00026931)*x616)));
evalcond[2]=((0.00026931)+((cj6*x616*x621))+((x616*x623))+(((-1.0)*x615*x617))+(((-1.0)*x616*x620))+((x613*x617)));
evalcond[3]=((0.06)+x618+((x617*x620))+(((-1.0)*x617*x624))+((x613*x616))+(((-1.0)*x617*x622))+(((-1.0)*x615*x616))+(((-1.0)*x619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x625=(cj6*npx);
IkReal x626=(npy*sj6);
IkReal x627=(npz*sj5);
IkReal x628=((2.7275298994736e+15)*cj3);
IkReal x629=(cj5*cj6*npy);
IkReal x630=(cj5*npx*sj6);
IkReal x631=((850000000000000.0)*sj3);
CheckValue<IkReal> x632=IKPowWithIntegerCheck(IKsign(((108250725278761.0)+(((-1.0)*(463680082910512.0)*cj3*sj3))+(((-1.0)*(102000000000000.0)*sj3))+(((327303587936832.0)*cj3))+(((671691935252246.0)*(cj3*cj3))))),-1);
if(!x632.valid){
continue;
}
CheckValue<IkReal> x633 = IKatan2WithCheck(IkReal((((x626*x631))+(((-2693100000000.0)*x630))+((x625*x628))+(((-600000000000000.0)*x626))+(((2693100000000.0)*x627))+(((-1.0)*x625*x631))+(((600000000000000.0)*x625))+(((-1.0)*x626*x628))+(((-2693100000000.0)*x629)))),((((-1.0)*x630*x631))+((x627*x631))+((x628*x630))+(((-2693100000000.0)*x626))+(((-1.0)*x627*x628))+(((600000000000000.0)*x629))+(((2693100000000.0)*x625))+(((-1.0)*x629*x631))+((x628*x629))+(((600000000000000.0)*x630))+(((-600000000000000.0)*x627))),IKFAST_ATAN2_MAGTHRESH);
if(!x633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x632.value)))+(x633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x634=(npy*sj6);
IkReal x635=((1.0)*cj6);
IkReal x636=(npx*x635);
IkReal x637=IKsin(j4);
IkReal x638=IKcos(j4);
IkReal x639=((0.27275298994736)*cj3);
IkReal x640=((0.085)*sj3);
IkReal x641=(npz*sj5);
IkReal x642=(cj5*npy);
IkReal x643=(x635*x642);
IkReal x644=(cj5*npx*sj6);
IkReal x645=((1.0)*x644);
evalcond[0]=(((x637*x639))+(((0.06)*x637))+x634+(((-1.0)*x636))+(((0.00026931)*x638))+(((-1.0)*x637*x640)));
evalcond[1]=((((-1.0)*x643))+(((-1.0)*x645))+((x638*x639))+(((0.06)*x638))+(((-0.00026931)*x637))+(((-1.0)*x638*x640))+x641);
evalcond[2]=((0.00026931)+((x637*x644))+((cj6*x637*x642))+((x634*x638))+(((-1.0)*x637*x641))+(((-1.0)*x636*x638)));
evalcond[3]=((0.06)+((x638*x641))+(((-1.0)*x638*x643))+(((-1.0)*x636*x637))+x639+((x634*x637))+(((-1.0)*x638*x645))+(((-1.0)*x640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
IkReal x646=((0.06)+(((-1.0)*(0.085)*sj3))+(((0.27275298994736)*cj3)));
CheckValue<IkReal> x649 = IKatan2WithCheck(IkReal(0.00026931),x646,IKFAST_ATAN2_MAGTHRESH);
if(!x649.valid){
continue;
}
IkReal x647=((-1.0)*(x649.value));
if((((7.25278761e-8)+(x646*x646))) < -0.00001)
continue;
CheckValue<IkReal> x650=IKPowWithIntegerCheck(IKabs(IKsqrt(((7.25278761e-8)+(x646*x646)))),-1);
if(!x650.valid){
continue;
}
if( (((x650.value)*(((((-1.0)*(1.0)*cj6*npx))+((npy*sj6)))))) < -1-IKFAST_SINCOS_THRESH || (((x650.value)*(((((-1.0)*(1.0)*cj6*npx))+((npy*sj6)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x648=IKasin(((x650.value)*(((((-1.0)*(1.0)*cj6*npx))+((npy*sj6))))));
j4array[0]=((((-1.0)*x648))+x647);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.14159265358979)+x648+x647);
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal j5eval[2];
IkReal x651=(sj4*(npx*npx));
IkReal x652=cj6*cj6;
IkReal x653=((((-1.0)*x651*x652))+((sj4*(npz*npz)))+(((2.0)*cj6*npx*npy*sj4*sj6))+x651+((sj4*x652*(npy*npy))));
j5eval[0]=x653;
j5eval[1]=IKsign(x653);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x654=npx*npx;
IkReal x655=cj6*cj6;
IkReal x656=((((-1.0)*x655*(npy*npy)))+(((-1.0)*(2.0)*cj6*npx*npy*sj6))+((x654*x655))+(((-1.0)*x654))+(((-1.0)*(1.0)*(npz*npz))));
j5eval[0]=x656;
j5eval[1]=IKsign(x656);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal j5eval[2];
IkReal x657=(cj4*(npx*npx));
IkReal x658=cj6*cj6;
IkReal x659=((((2.0)*cj4*cj6*npx*npy*sj6))+((cj4*x658*(npy*npy)))+((cj4*(npz*npz)))+x657+(((-1.0)*x657*x658)));
j5eval[0]=x659;
j5eval[1]=IKsign(x659);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
bool bgotonextstatement = true;
do
{
IkReal x660=((0.06)+(((-1.0)*(1.0)*cj6*npx))+((npy*sj6))+(((-1.0)*(0.085)*sj3))+(((0.27275298994736)*cj3)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.158119266053101)+(((-1.0)*(0.137086614571574)*sj3))+pp+(((-1.0)*(0.0786303587936832)*cj3)));
evalcond[2]=x660;
evalcond[3]=x660;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj4=1.0;
cj4=0;
j4=1.5707963267949;
IkReal x661=npx*npx;
IkReal x662=cj6*cj6;
IkReal x663=((((-1.0)*x662*(npy*npy)))+(((-1.0)*(2.0)*cj6*npx*npy*sj6))+((x661*x662))+(((-1.0)*x661))+(((-1.0)*(1.0)*(npz*npz))));
j5eval[0]=x663;
j5eval[1]=IKsign(x663);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x664=npx*npx;
IkReal x665=(npx*sj6);
IkReal x666=cj6*cj6;
IkReal x667=(cj6*npy);
IkReal x668=((0.085)*cj3);
IkReal x669=((0.27275298994736)*sj3);
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal((((x665*x669))+(((-1.0)*(0.00026931)*npz))+(((0.27)*x665))+((x665*x668))+((x667*x669))+(((0.27)*x667))+((x667*x668)))),(((npz*x669))+(((0.00026931)*x665))+(((0.27)*npz))+((npz*x668))+(((0.00026931)*x667))),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
CheckValue<IkReal> x671=IKPowWithIntegerCheck(IKsign((((x664*x666))+(((-1.0)*x664))+(((-1.0)*x666*(npy*npy)))+(((-2.0)*cj6*npy*x665))+(((-1.0)*(1.0)*(npz*npz))))),-1);
if(!x671.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x670.value)+(((1.5707963267949)*(x671.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x672=IKsin(j5);
IkReal x673=(cj6*npy);
IkReal x674=IKcos(j5);
IkReal x675=((1.0)*x674);
IkReal x676=(npx*sj6);
evalcond[0]=((-0.00026931)+(((-1.0)*x675*x676))+((npz*x672))+(((-1.0)*x673*x675)));
evalcond[1]=((0.27)+(((0.27275298994736)*sj3))+((npz*x674))+((x672*x673))+((x672*x676))+(((0.085)*cj3)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x677=((0.27275298994736)*cj3);
IkReal x678=((0.085)*sj3);
IkReal x679=(npy*sj6);
IkReal x680=(cj6*npx);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.158119266053101)+(((-1.0)*(0.137086614571574)*sj3))+pp+(((-1.0)*(0.0786303587936832)*cj3)));
evalcond[2]=((-0.06)+(((-1.0)*x680))+(((-1.0)*x677))+x678+x679);
evalcond[3]=((0.06)+(((-1.0)*x678))+(((-1.0)*x679))+x677+x680);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj4=-1.0;
cj4=0;
j4=-1.5707963267949;
IkReal x681=npx*npx;
IkReal x682=cj6*cj6;
IkReal x683=((((-1.0)*(2.0)*cj6*npx*npy*sj6))+(((-1.0)*x682*(npy*npy)))+(((-1.0)*x681))+((x681*x682))+(((-1.0)*(1.0)*(npz*npz))));
j5eval[0]=x683;
j5eval[1]=IKsign(x683);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x684=npx*npx;
IkReal x685=(npx*sj6);
IkReal x686=cj6*cj6;
IkReal x687=(cj6*npy);
IkReal x688=((0.085)*cj3);
IkReal x689=((0.27275298994736)*sj3);
CheckValue<IkReal> x690=IKPowWithIntegerCheck(IKsign((((x684*x686))+(((-1.0)*x684))+(((-1.0)*x686*(npy*npy)))+(((-1.0)*(1.0)*(npz*npz)))+(((-2.0)*cj6*npy*x685)))),-1);
if(!x690.valid){
continue;
}
CheckValue<IkReal> x691 = IKatan2WithCheck(IkReal(((((0.00026931)*npz))+((x687*x688))+((x687*x689))+(((0.27)*x687))+((x685*x689))+(((0.27)*x685))+((x685*x688)))),((((0.27)*npz))+(((-0.00026931)*x685))+((npz*x689))+((npz*x688))+(((-0.00026931)*x687))),IKFAST_ATAN2_MAGTHRESH);
if(!x691.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x690.value)))+(x691.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x692=IKsin(j5);
IkReal x693=(cj6*npy);
IkReal x694=IKcos(j5);
IkReal x695=((1.0)*x694);
IkReal x696=(npx*sj6);
evalcond[0]=((0.00026931)+((npz*x692))+(((-1.0)*x693*x695))+(((-1.0)*x695*x696)));
evalcond[1]=((0.27)+(((0.27275298994736)*sj3))+((npz*x694))+((x692*x696))+(((0.085)*cj3))+((x692*x693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x697=((0.00026931)+(((-1.0)*(1.0)*cj6*npx))+((npy*sj6)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j4))), 6.28318530717959)));
evalcond[1]=((-0.158119266053101)+(((-1.0)*(0.137086614571574)*sj3))+pp+(((-1.0)*(0.0786303587936832)*cj3)));
evalcond[2]=x697;
evalcond[3]=x697;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj4=0;
cj4=1.0;
j4=0;
IkReal x698=npx*npx;
IkReal x699=cj6*cj6;
IkReal x700=((((-1.0)*(2.0)*cj6*npx*npy*sj6))+(((-1.0)*x699*(npy*npy)))+(((-1.0)*x698))+(((-1.0)*(1.0)*(npz*npz)))+((x698*x699)));
j5eval[0]=x700;
j5eval[1]=IKsign(x700);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x701=npx*npx;
IkReal x702=(npx*sj6);
IkReal x703=cj6*cj6;
IkReal x704=(cj3*npz);
IkReal x705=(cj6*npy);
IkReal x706=(npz*sj3);
IkReal x707=(cj3*cj6*npy);
IkReal x708=(cj3*npx*sj6);
IkReal x709=(cj6*npy*sj3);
IkReal x710=(npx*sj3*sj6);
CheckValue<IkReal> x711=IKPowWithIntegerCheck(IKsign(((((-1.0)*x703*(npy*npy)))+((x701*x703))+(((-2.0)*cj6*npy*x702))+(((-1.0)*x701))+(((-1.0)*(1.0)*(npz*npz))))),-1);
if(!x711.valid){
continue;
}
CheckValue<IkReal> x712 = IKatan2WithCheck(IkReal(((((0.27)*x705))+(((-0.085)*x706))+(((0.27275298994736)*x709))+(((0.27)*x702))+(((0.27275298994736)*x704))+(((0.085)*x708))+(((0.06)*npz))+(((0.085)*x707))+(((0.27275298994736)*x710)))),((((-0.06)*x705))+(((0.085)*x709))+(((0.085)*x704))+(((0.27)*npz))+(((-0.27275298994736)*x708))+(((-0.06)*x702))+(((0.085)*x710))+(((0.27275298994736)*x706))+(((-0.27275298994736)*x707))),IKFAST_ATAN2_MAGTHRESH);
if(!x712.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x711.value)))+(x712.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x713=IKcos(j5);
IkReal x714=IKsin(j5);
IkReal x715=(cj6*npy);
IkReal x716=(npx*sj6);
IkReal x717=((1.0)*x713);
evalcond[0]=((0.27)+(((0.27275298994736)*sj3))+((x714*x716))+((npz*x713))+(((0.085)*cj3))+((x714*x715)));
evalcond[1]=((0.06)+(((-1.0)*(0.085)*sj3))+(((-1.0)*x715*x717))+((npz*x714))+(((0.27275298994736)*cj3))+(((-1.0)*x716*x717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x718=(npy*sj6);
IkReal x719=(cj6*npx);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j4)))), 6.28318530717959)));
evalcond[1]=((-0.158119266053101)+(((-1.0)*(0.137086614571574)*sj3))+pp+(((-1.0)*(0.0786303587936832)*cj3)));
evalcond[2]=((-0.00026931)+(((-1.0)*x719))+x718);
evalcond[3]=((0.00026931)+(((-1.0)*x718))+x719);
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j5eval[2];
sj4=0;
cj4=-1.0;
j4=3.14159265358979;
IkReal x720=npx*npx;
IkReal x721=cj6*cj6;
IkReal x722=((((-1.0)*(2.0)*cj6*npx*npy*sj6))+(((-1.0)*x720))+(((-1.0)*x721*(npy*npy)))+((x720*x721))+(((-1.0)*(1.0)*(npz*npz))));
j5eval[0]=x722;
j5eval[1]=IKsign(x722);
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j5]

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x723=npx*npx;
IkReal x724=(npx*sj6);
IkReal x725=cj6*cj6;
IkReal x726=(cj3*npz);
IkReal x727=(cj6*npy);
IkReal x728=(npz*sj3);
IkReal x729=(cj3*cj6*npy);
IkReal x730=(cj3*npx*sj6);
IkReal x731=(cj6*npy*sj3);
IkReal x732=(npx*sj3*sj6);
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(((((0.085)*x728))+(((-0.27275298994736)*x726))+(((0.27)*x724))+(((-1.0)*(0.06)*npz))+(((0.27)*x727))+(((0.27275298994736)*x731))+(((0.085)*x729))+(((0.27275298994736)*x732))+(((0.085)*x730)))),((((-0.085)*x732))+(((0.085)*x726))+(((-0.085)*x731))+(((0.27)*npz))+(((0.27275298994736)*x729))+(((0.27275298994736)*x730))+(((0.06)*x724))+(((0.06)*x727))+(((0.27275298994736)*x728))),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734=IKPowWithIntegerCheck(IKsign((((x723*x725))+(((-2.0)*cj6*npy*x724))+(((-1.0)*x725*(npy*npy)))+(((-1.0)*x723))+(((-1.0)*(1.0)*(npz*npz))))),-1);
if(!x734.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(x733.value)+(((1.5707963267949)*(x734.value))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x735=IKcos(j5);
IkReal x736=IKsin(j5);
IkReal x737=(cj6*npy);
IkReal x738=(npx*sj6);
IkReal x739=((1.0)*x735);
evalcond[0]=((0.27)+((x736*x737))+(((0.27275298994736)*sj3))+((npz*x735))+(((0.085)*cj3))+((x736*x738)));
evalcond[1]=((-0.06)+(((-1.0)*(0.27275298994736)*cj3))+((npz*x736))+(((-1.0)*x737*x739))+(((0.085)*sj3))+(((-1.0)*x738*x739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x740=npx*npx;
IkReal x741=(cj4*x740);
IkReal x742=(npx*sj6);
IkReal x743=cj6*cj6;
IkReal x744=npy*npy;
IkReal x745=(cj3*npz);
IkReal x746=(npz*sj3);
IkReal x747=((0.27)*cj4);
IkReal x748=(cj6*npy);
IkReal x749=(npx*sj4);
IkReal x750=((0.085)*cj3*cj4);
IkReal x751=((0.27275298994736)*cj4*sj3);
IkReal x752=((1.0)*sj4*sj6);
IkReal x753=(npy*x749);
IkReal x754=((0.27275298994736)*cj3);
IkReal x755=((0.085)*sj3);
CheckValue<IkReal> x756=IKPowWithIntegerCheck(IKsign(((((2.0)*cj4*cj6*npy*x742))+((cj4*(npz*npz)))+((cj4*x743*x744))+(((-1.0)*x741*x743))+x741)),-1);
if(!x756.valid){
continue;
}
CheckValue<IkReal> x757 = IKatan2WithCheck(IkReal(((((-0.27275298994736)*x745))+(((-1.0)*(0.06)*npz))+(((-1.0)*x747*x748))+(((-1.0)*x748*x751))+(((-1.0)*npy*npz*x752))+(((-1.0)*x742*x751))+(((-1.0)*x748*x750))+(((-1.0)*x742*x750))+(((0.085)*x746))+((cj6*npz*x749))+(((-1.0)*x742*x747)))),((((0.06)*x748))+(((-1.0)*x748*x755))+(((-0.27275298994736)*cj4*x746))+((x742*x754))+(((0.06)*x742))+((x748*x754))+(((-2.0)*x743*x753))+(((-0.085)*cj4*x745))+(((-1.0)*cj6*x740*x752))+(((-1.0)*npz*x747))+((cj6*sj4*sj6*x744))+x753+(((-1.0)*x742*x755))),IKFAST_ATAN2_MAGTHRESH);
if(!x757.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x756.value)))+(x757.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x758=IKcos(j5);
IkReal x759=IKsin(j5);
IkReal x760=(cj6*npy);
IkReal x761=(npx*sj6);
IkReal x762=((0.27275298994736)*cj3);
IkReal x763=((0.085)*sj3);
IkReal x764=(npz*x759);
IkReal x765=((1.0)*x758);
IkReal x766=(x760*x765);
IkReal x767=(x761*x765);
IkReal x768=(npy*sj6);
IkReal x769=((1.0)*cj6*npx);
IkReal x770=(sj4*x758);
evalcond[0]=((0.27)+(((0.27275298994736)*sj3))+((x759*x761))+((npz*x758))+((x759*x760))+(((0.085)*cj3)));
evalcond[1]=((((-1.0)*x767))+((cj4*x762))+(((-1.0)*x766))+x764+(((0.06)*cj4))+(((-1.0)*(0.00026931)*sj4))+(((-1.0)*cj4*x763)));
evalcond[2]=((0.00026931)+((x761*x770))+((x760*x770))+(((-1.0)*sj4*x764))+((cj4*x768))+(((-1.0)*cj4*x769)));
evalcond[3]=((0.06)+(((-1.0)*cj4*x766))+((sj4*x768))+x762+((cj4*x764))+(((-1.0)*x763))+(((-1.0)*cj4*x767))+(((-1.0)*sj4*x769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x771=npx*npx;
IkReal x772=(npx*sj6);
IkReal x773=cj6*cj6;
IkReal x774=((0.06)*cj4);
IkReal x775=(cj6*npy);
IkReal x776=((0.00026931)*sj4);
IkReal x777=(cj3*npz);
IkReal x778=((0.085)*cj3);
IkReal x779=(npz*sj3);
IkReal x780=((0.27275298994736)*sj3);
IkReal x781=((0.27275298994736)*cj3*cj4);
IkReal x782=((0.085)*cj4*sj3);
CheckValue<IkReal> x783=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj6*npy*x772))+((x771*x773))+(((-1.0)*x771))+(((-1.0)*x773*(npy*npy)))+(((-1.0)*(1.0)*(npz*npz))))),-1);
if(!x783.valid){
continue;
}
CheckValue<IkReal> x784 = IKatan2WithCheck(IkReal((((x772*x780))+((npz*x774))+((x775*x778))+(((0.27275298994736)*cj4*x777))+((x772*x778))+(((0.27)*x775))+(((-1.0)*npz*x776))+((x775*x780))+(((-0.085)*cj4*x779))+(((0.27)*x772)))),((((-1.0)*x774*x775))+(((0.27275298994736)*x779))+(((-1.0)*x772*x774))+(((0.27)*npz))+((x772*x782))+(((-1.0)*x772*x781))+((x775*x782))+((x772*x776))+(((0.085)*x777))+((x775*x776))+(((-1.0)*x775*x781))),IKFAST_ATAN2_MAGTHRESH);
if(!x784.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x783.value)))+(x784.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x785=IKcos(j5);
IkReal x786=IKsin(j5);
IkReal x787=(cj6*npy);
IkReal x788=(npx*sj6);
IkReal x789=((0.27275298994736)*cj3);
IkReal x790=((0.085)*sj3);
IkReal x791=(npz*x786);
IkReal x792=((1.0)*x785);
IkReal x793=(x787*x792);
IkReal x794=(x788*x792);
IkReal x795=(npy*sj6);
IkReal x796=((1.0)*cj6*npx);
IkReal x797=(sj4*x785);
evalcond[0]=((0.27)+(((0.27275298994736)*sj3))+((x786*x787))+((npz*x785))+((x786*x788))+(((0.085)*cj3)));
evalcond[1]=(((cj4*x789))+(((-1.0)*x794))+(((0.06)*cj4))+(((-1.0)*x793))+(((-1.0)*(0.00026931)*sj4))+(((-1.0)*cj4*x790))+x791);
evalcond[2]=((0.00026931)+((x787*x797))+((x788*x797))+(((-1.0)*sj4*x791))+((cj4*x795))+(((-1.0)*cj4*x796)));
evalcond[3]=((0.06)+x789+(((-1.0)*cj4*x794))+((sj4*x795))+(((-1.0)*cj4*x793))+(((-1.0)*x790))+(((-1.0)*sj4*x796))+((cj4*x791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x798=npx*npx;
IkReal x799=(sj4*x798);
IkReal x800=(npx*sj6);
IkReal x801=cj6*cj6;
IkReal x802=npy*npy;
IkReal x803=((0.27)*sj4);
IkReal x804=(cj6*npy);
IkReal x805=(cj4*npy);
IkReal x806=((0.085)*cj3*sj4);
IkReal x807=((0.27275298994736)*sj3*sj4);
IkReal x808=(npz*sj4);
IkReal x809=(cj4*cj6*sj6);
CheckValue<IkReal> x810=IKPowWithIntegerCheck(IKsign((((sj4*x801*x802))+(((2.0)*cj6*npy*sj4*x800))+((sj4*(npz*npz)))+(((-1.0)*x799*x801))+x799)),-1);
if(!x810.valid){
continue;
}
CheckValue<IkReal> x811 = IKatan2WithCheck(IkReal(((((-1.0)*x803*x804))+(((0.00026931)*npz))+(((-1.0)*x804*x806))+(((-1.0)*x800*x803))+(((-1.0)*x804*x807))+(((-1.0)*cj4*cj6*npx*npz))+(((-1.0)*x800*x806))+(((-1.0)*x800*x807))+((npz*sj6*x805)))),((((-0.085)*cj3*x808))+(((-0.27275298994736)*sj3*x808))+(((-1.0)*npx*x805))+(((2.0)*npx*x801*x805))+(((-0.00026931)*x804))+(((-0.27)*x808))+(((-1.0)*x802*x809))+((x798*x809))+(((-0.00026931)*x800))),IKFAST_ATAN2_MAGTHRESH);
if(!x811.valid){
continue;
}
j5array[0]=((-1.5707963267949)+(((1.5707963267949)*(x810.value)))+(x811.value));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x812=IKcos(j5);
IkReal x813=IKsin(j5);
IkReal x814=(cj6*npy);
IkReal x815=(npx*sj6);
IkReal x816=((0.27275298994736)*cj3);
IkReal x817=((0.085)*sj3);
IkReal x818=(npz*x813);
IkReal x819=((1.0)*x812);
IkReal x820=(x814*x819);
IkReal x821=(x815*x819);
IkReal x822=(npy*sj6);
IkReal x823=((1.0)*cj6*npx);
IkReal x824=(sj4*x812);
evalcond[0]=((0.27)+((x813*x815))+((npz*x812))+(((0.27275298994736)*sj3))+((x813*x814))+(((0.085)*cj3)));
evalcond[1]=((((-1.0)*x820))+((cj4*x816))+(((-1.0)*cj4*x817))+(((-1.0)*x821))+(((0.06)*cj4))+x818+(((-1.0)*(0.00026931)*sj4)));
evalcond[2]=((0.00026931)+((cj4*x822))+(((-1.0)*cj4*x823))+((x814*x824))+(((-1.0)*sj4*x818))+((x815*x824)));
evalcond[3]=((0.06)+(((-1.0)*sj4*x823))+(((-1.0)*x817))+((sj4*x822))+x816+(((-1.0)*cj4*x821))+(((-1.0)*cj4*x820))+((cj4*x818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x123=((1.0)*cj5);
IkReal x124=((1.0)*sj5);
IkReal x125=(((r00*sj6))+((cj6*r01)));
IkReal x126=((((-1.0)*r02*x123))+(((-1.0)*x124*x125)));
IkReal x127=((1.0)*sj3);
IkReal x128=((1.0)*sj6);
IkReal x129=(((cj6*r00))+(((-1.0)*r01*x128)));
IkReal x130=(((cj5*x125))+(((-1.0)*r02*x124)));
IkReal x131=(((cj4*x130))+((sj4*x129)));
IkReal x132=((1.0)*cj4);
IkReal x133=(((r10*sj6))+((cj6*r11)));
IkReal x134=((((-1.0)*x124*x133))+(((-1.0)*r12*x123)));
IkReal x135=((((-1.0)*r11*x128))+((cj6*r10)));
IkReal x136=((((-1.0)*r12*x124))+((cj5*x133)));
IkReal x137=(((cj4*x136))+((sj4*x135)));
IkReal x138=(((cj6*r21))+((r20*sj6)));
IkReal x139=((((-1.0)*r22*x123))+(((-1.0)*x124*x138)));
IkReal x140=((((-1.0)*r21*x128))+((cj6*r20)));
IkReal x141=((((-1.0)*r22*x124))+((cj5*x138)));
IkReal x142=(((cj4*x141))+((sj4*x140)));
new_r00=(((cj3*x126))+(((-1.0)*x127*x131)));
new_r01=((((-1.0)*x129*x132))+((sj4*x130)));
new_r02=(((sj3*x126))+((cj3*x131)));
new_r10=((((-1.0)*x127*x137))+((cj3*x134)));
new_r11=((((-1.0)*x132*x135))+((sj4*x136)));
new_r12=(((sj3*x134))+((cj3*x137)));
new_r20=(((cj3*x139))+(((-1.0)*x127*x142)));
new_r21=((((-1.0)*x132*x140))+((sj4*x141)));
new_r22=(((cj3*x142))+((sj3*x139)));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal j0eval[2];
IkReal x143=((1.0)*cj5);
IkReal x144=((1.0)*sj5);
IkReal x145=x125;
IkReal x146=((((-1.0)*r02*x143))+(((-1.0)*x144*x145)));
IkReal x147=((1.0)*sj3);
IkReal x148=((1.0)*sj6);
IkReal x149=x129;
IkReal x150=((((-1.0)*r02*x144))+((cj5*x145)));
IkReal x151=(((cj4*x150))+((sj4*x149)));
IkReal x152=((1.0)*cj4);
IkReal x153=x133;
IkReal x154=((((-1.0)*x144*x153))+(((-1.0)*r12*x143)));
IkReal x155=x135;
IkReal x156=((((-1.0)*r12*x144))+((cj5*x153)));
IkReal x157=(((cj4*x156))+((sj4*x155)));
IkReal x158=x138;
IkReal x159=((((-1.0)*r22*x143))+(((-1.0)*x144*x158)));
IkReal x160=x140;
IkReal x161=((((-1.0)*r22*x144))+((cj5*x158)));
IkReal x162=(((sj4*x160))+((cj4*x161)));
new_r00=((((-1.0)*x147*x151))+((cj3*x146)));
new_r01=((((-1.0)*x149*x152))+((sj4*x150)));
new_r02=(((sj3*x146))+((cj3*x151)));
new_r10=((((-1.0)*x147*x157))+((cj3*x154)));
new_r11=(((sj4*x156))+(((-1.0)*x152*x155)));
new_r12=(((cj3*x157))+((sj3*x154)));
new_r20=(((cj3*x159))+(((-1.0)*x147*x162)));
new_r21=((((-1.0)*x152*x160))+((sj4*x161)));
new_r22=(((cj3*x162))+((sj3*x159)));
j0eval[0]=sj1;
j0eval[1]=IKsign(sj1);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
IkReal x163=((1.0)*cj5);
IkReal x164=((1.0)*sj5);
IkReal x165=x125;
IkReal x166=((((-1.0)*x164*x165))+(((-1.0)*r02*x163)));
IkReal x167=((1.0)*sj3);
IkReal x168=((1.0)*sj6);
IkReal x169=x129;
IkReal x170=(((cj5*x165))+(((-1.0)*r02*x164)));
IkReal x171=(((cj4*x170))+((sj4*x169)));
IkReal x172=((1.0)*cj4);
IkReal x173=x133;
IkReal x174=((((-1.0)*r12*x163))+(((-1.0)*x164*x173)));
IkReal x175=x135;
IkReal x176=((((-1.0)*r12*x164))+((cj5*x173)));
IkReal x177=(((cj4*x176))+((sj4*x175)));
IkReal x178=x138;
IkReal x179=((((-1.0)*r22*x163))+(((-1.0)*x164*x178)));
IkReal x180=x140;
IkReal x181=(((cj5*x178))+(((-1.0)*r22*x164)));
IkReal x182=(((cj4*x181))+((sj4*x180)));
new_r00=((((-1.0)*x167*x171))+((cj3*x166)));
new_r01=(((sj4*x170))+(((-1.0)*x169*x172)));
new_r02=(((cj3*x171))+((sj3*x166)));
new_r10=((((-1.0)*x167*x177))+((cj3*x174)));
new_r11=(((sj4*x176))+(((-1.0)*x172*x175)));
new_r12=(((sj3*x174))+((cj3*x177)));
new_r20=((((-1.0)*x167*x182))+((cj3*x179)));
new_r21=(((sj4*x181))+(((-1.0)*x172*x180)));
new_r22=(((sj3*x179))+((cj3*x182)));
j0eval[0]=sj1;
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x184 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x184.valid){
continue;
}
IkReal x183=((-1.0)*(((1.0)*(x184.value))));
j0array[0]=x183;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x183);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x185=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x185)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x185))+((cj0*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x185))))+IKsqr(((((-1.0)*sj0*x185))+((cj0*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x185))), ((((-1.0)*sj0*x185))+((cj0*new_r00))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x186=IKsin(j2);
IkReal x187=(cj0*x186);
IkReal x188=IKcos(j2);
IkReal x189=((1.0)*x188);
IkReal x190=((-1.0)*x189);
IkReal x191=((1.0)*sj0);
IkReal x192=(((sj0*x186))+(((-1.0)*cj0*x189)));
evalcond[0]=(((new_r11*sj0))+((cj0*new_r01))+x186);
evalcond[1]=(((sj0*x188))+new_r01+x187);
evalcond[2]=(((cj0*new_r00))+((new_r10*sj0))+x190);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x191))+(((-1.0)*x186)));
evalcond[4]=((((-1.0)*new_r01*x191))+x190+((cj0*new_r11)));
evalcond[5]=(new_r00+x192);
evalcond[6]=(new_r11+x192);
evalcond[7]=((((-1.0)*x187))+new_r10+(((-1.0)*x188*x191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x194 = IKatan2WithCheck(IkReal(new_r02),new_r12,IKFAST_ATAN2_MAGTHRESH);
if(!x194.valid){
continue;
}
IkReal x193=((-1.0)*(((1.0)*(x194.value))));
j0array[0]=x193;
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+x193);
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*(1.0)*new_r02*(IKsin(j0))))+((new_r12*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x195=((1.0)*new_r00);
if( IKabs((((cj0*new_r01))+(((-1.0)*sj0*x195)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x195))+(((-1.0)*(1.0)*new_r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*new_r01))+(((-1.0)*sj0*x195))))+IKsqr(((((-1.0)*cj0*x195))+(((-1.0)*(1.0)*new_r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*new_r01))+(((-1.0)*sj0*x195))), ((((-1.0)*cj0*x195))+(((-1.0)*(1.0)*new_r01*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x196=IKcos(j2);
IkReal x197=IKsin(j2);
IkReal x198=((1.0)*x197);
IkReal x199=((-1.0)*x198);
IkReal x200=(cj0*x196);
IkReal x201=((1.0)*sj0);
IkReal x202=(((sj0*x196))+(((-1.0)*cj0*x198)));
evalcond[0]=(((cj0*new_r00))+((new_r10*sj0))+x196);
evalcond[1]=(((new_r11*sj0))+((cj0*new_r01))+x199);
evalcond[2]=(((sj0*x197))+x200+new_r00);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x201))+x199);
evalcond[4]=((((-1.0)*x196))+((cj0*new_r11))+(((-1.0)*new_r01*x201)));
evalcond[5]=(x202+new_r01);
evalcond[6]=(new_r10+x202);
evalcond[7]=((((-1.0)*x200))+(((-1.0)*x197*x201))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x204=IKPowWithIntegerCheck(sj1,-1);
if(!x204.valid){
continue;
}
IkReal x203=x204.value;
CheckValue<IkReal> x205=IKPowWithIntegerCheck(new_r12,-1);
if(!x205.valid){
continue;
}
if( IKabs((x203*(x205.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj1*cj1))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x203)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x203*(x205.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj1*cj1)))))))+IKsqr((new_r02*x203))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((x203*(x205.value)*(((1.0)+(((-1.0)*(1.0)*(new_r02*new_r02)))+(((-1.0)*(1.0)*(cj1*cj1)))))), (new_r02*x203));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x206=IKcos(j0);
IkReal x207=((1.0)*sj1);
IkReal x208=(x206*x207);
IkReal x209=IKsin(j0);
IkReal x210=(x207*x209);
IkReal x211=(new_r02*x206);
IkReal x212=(new_r12*x209);
IkReal x213=((1.0)*cj1);
evalcond[0]=((((-1.0)*x208))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x210)));
evalcond[2]=(((new_r12*x206))+(((-1.0)*new_r02*x209)));
evalcond[3]=((((-1.0)*x207))+x211+x212);
evalcond[4]=(((cj1*x212))+(((-1.0)*new_r22*x207))+((cj1*x211)));
evalcond[5]=((((-1.0)*new_r20*x213))+(((-1.0)*new_r10*x210))+(((-1.0)*new_r00*x208)));
evalcond[6]=((((-1.0)*new_r11*x210))+(((-1.0)*new_r21*x213))+(((-1.0)*new_r01*x208)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x213))+(((-1.0)*x207*x212))+(((-1.0)*x207*x211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x214=((1.0)*cj5);
IkReal x215=((1.0)*sj5);
IkReal x216=x125;
IkReal x217=((((-1.0)*r02*x214))+(((-1.0)*x215*x216)));
IkReal x218=((1.0)*sj3);
IkReal x219=((1.0)*sj6);
IkReal x220=x129;
IkReal x221=((((-1.0)*r02*x215))+((cj5*x216)));
IkReal x222=(((sj4*x220))+((cj4*x221)));
IkReal x223=((1.0)*cj4);
IkReal x224=x133;
IkReal x225=((((-1.0)*x215*x224))+(((-1.0)*r12*x214)));
IkReal x226=x135;
IkReal x227=(((cj5*x224))+(((-1.0)*r12*x215)));
IkReal x228=(((sj4*x226))+((cj4*x227)));
IkReal x229=x138;
IkReal x230=((((-1.0)*r22*x214))+(((-1.0)*x215*x229)));
IkReal x231=x140;
IkReal x232=((((-1.0)*r22*x215))+((cj5*x229)));
IkReal x233=(((cj4*x232))+((sj4*x231)));
new_r00=(((cj3*x217))+(((-1.0)*x218*x222)));
new_r01=(((sj4*x221))+(((-1.0)*x220*x223)));
new_r02=(((sj3*x217))+((cj3*x222)));
new_r10=(((cj3*x225))+(((-1.0)*x218*x228)));
new_r11=((((-1.0)*x223*x226))+((sj4*x227)));
new_r12=(((sj3*x225))+((cj3*x228)));
new_r20=((((-1.0)*x218*x233))+((cj3*x230)));
new_r21=((((-1.0)*x223*x231))+((sj4*x232)));
new_r22=(((cj3*x233))+((sj3*x230)));
j2eval[0]=sj1;
j2eval[1]=IKsign(sj1);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x234=((1.0)*cj5);
IkReal x235=((1.0)*sj5);
IkReal x236=x125;
IkReal x237=((((-1.0)*x235*x236))+(((-1.0)*r02*x234)));
IkReal x238=((1.0)*sj3);
IkReal x239=((1.0)*sj6);
IkReal x240=x129;
IkReal x241=((((-1.0)*r02*x235))+((cj5*x236)));
IkReal x242=(((sj4*x240))+((cj4*x241)));
IkReal x243=((1.0)*cj4);
IkReal x244=x133;
IkReal x245=((((-1.0)*x235*x244))+(((-1.0)*r12*x234)));
IkReal x246=x135;
IkReal x247=((((-1.0)*r12*x235))+((cj5*x244)));
IkReal x248=(((sj4*x246))+((cj4*x247)));
IkReal x249=x138;
IkReal x250=((((-1.0)*x235*x249))+(((-1.0)*r22*x234)));
IkReal x251=x140;
IkReal x252=(((cj5*x249))+(((-1.0)*r22*x235)));
IkReal x253=(((sj4*x251))+((cj4*x252)));
new_r00=(((cj3*x237))+(((-1.0)*x238*x242)));
new_r01=(((sj4*x241))+(((-1.0)*x240*x243)));
new_r02=(((sj3*x237))+((cj3*x242)));
new_r10=((((-1.0)*x238*x248))+((cj3*x245)));
new_r11=(((sj4*x247))+(((-1.0)*x243*x246)));
new_r12=(((sj3*x245))+((cj3*x248)));
new_r20=(((cj3*x250))+(((-1.0)*x238*x253)));
new_r21=((((-1.0)*x243*x251))+((sj4*x252)));
new_r22=(((sj3*x250))+((cj3*x253)));
j2eval[0]=sj0;
j2eval[1]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x254=((1.0)*cj5);
IkReal x255=((1.0)*sj5);
IkReal x256=x125;
IkReal x257=((((-1.0)*x255*x256))+(((-1.0)*r02*x254)));
IkReal x258=((1.0)*sj3);
IkReal x259=((1.0)*sj6);
IkReal x260=x129;
IkReal x261=((((-1.0)*r02*x255))+((cj5*x256)));
IkReal x262=(((cj4*x261))+((sj4*x260)));
IkReal x263=((1.0)*cj4);
IkReal x264=x133;
IkReal x265=((((-1.0)*x255*x264))+(((-1.0)*r12*x254)));
IkReal x266=x135;
IkReal x267=(((cj5*x264))+(((-1.0)*r12*x255)));
IkReal x268=(((cj4*x267))+((sj4*x266)));
IkReal x269=x138;
IkReal x270=((((-1.0)*r22*x254))+(((-1.0)*x255*x269)));
IkReal x271=x140;
IkReal x272=(((cj5*x269))+(((-1.0)*r22*x255)));
IkReal x273=(((sj4*x271))+((cj4*x272)));
new_r00=((((-1.0)*x258*x262))+((cj3*x257)));
new_r01=((((-1.0)*x260*x263))+((sj4*x261)));
new_r02=(((cj3*x262))+((sj3*x257)));
new_r10=(((cj3*x265))+(((-1.0)*x258*x268)));
new_r11=((((-1.0)*x263*x266))+((sj4*x267)));
new_r12=(((sj3*x265))+((cj3*x268)));
new_r20=(((cj3*x270))+(((-1.0)*x258*x273)));
new_r21=((((-1.0)*x263*x271))+((sj4*x272)));
new_r22=(((sj3*x270))+((cj3*x273)));
j2eval[0]=cj0;
j2eval[1]=cj1;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x274=((1.0)*cj1);
IkReal x275=((((-1.0)*x274))+new_r22);
IkReal x276=((1.0)*sj1);
IkReal x277=((((-1.0)*x276))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x275;
evalcond[2]=x275;
evalcond[3]=new_r02;
evalcond[4]=x277;
evalcond[5]=x277;
evalcond[6]=((((-1.0)*new_r22*x276))+((cj1*new_r12)));
evalcond[7]=((((-1.0)*new_r20*x274))+(((-1.0)*new_r10*x276)));
evalcond[8]=((((-1.0)*new_r11*x276))+(((-1.0)*new_r21*x274)));
evalcond[9]=((1.0)+(((-1.0)*new_r12*x276))+(((-1.0)*new_r22*x274)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x278.valid){
continue;
}
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x278.value)))+(x279.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x280=IKcos(j2);
IkReal x281=IKsin(j2);
IkReal x282=((1.0)*new_r12);
IkReal x283=((1.0)*x280);
IkReal x284=((-1.0)*x283);
evalcond[0]=(((new_r12*x280))+new_r20);
evalcond[1]=(((new_r22*x281))+new_r11);
evalcond[2]=((((-1.0)*x281*x282))+new_r21);
evalcond[3]=(new_r10+(((-1.0)*new_r22*x283)));
evalcond[4]=((((-1.0)*x281))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=((((-1.0)*(1.0)*new_r01))+x284);
evalcond[6]=(((new_r11*new_r22))+(((-1.0)*new_r21*x282))+x281);
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x282))+x284);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x285=((1.0)*cj1);
IkReal x286=(new_r22+(((-1.0)*x285)));
IkReal x287=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x286;
evalcond[2]=x286;
evalcond[3]=new_r02;
evalcond[4]=(sj1+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*x287)));
evalcond[6]=((((-1.0)*new_r12*x285))+(((-1.0)*new_r22*x287)));
evalcond[7]=(((new_r10*sj1))+(((-1.0)*new_r20*x285)));
evalcond[8]=((((-1.0)*new_r21*x285))+((new_r11*sj1)));
evalcond[9]=((1.0)+((new_r12*sj1))+(((-1.0)*new_r22*x285)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x288=IKsin(j2);
IkReal x289=((1.0)*(IKcos(j2)));
IkReal x290=((-1.0)*x289);
IkReal x291=((1.0)*new_r11);
IkReal x292=((1.0)*new_r10);
evalcond[0]=(((new_r12*x288))+new_r21);
evalcond[1]=((((-1.0)*x288))+new_r00);
evalcond[2]=(x290+new_r01);
evalcond[3]=((((-1.0)*new_r12*x289))+new_r20);
evalcond[4]=(((new_r22*x288))+(((-1.0)*x291)));
evalcond[5]=((((-1.0)*new_r22*x289))+(((-1.0)*x292)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x291))+x288);
evalcond[7]=(x290+((new_r12*new_r20))+(((-1.0)*new_r22*x292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x293=((1.0)*cj0);
IkReal x294=((1.0)*sj0);
IkReal x295=((((-1.0)*new_r02*x294))+((cj0*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x293))+new_r02);
evalcond[3]=((((-1.0)*x294))+new_r12);
evalcond[4]=x295;
evalcond[5]=x295;
evalcond[6]=((-1.0)+((new_r12*sj0))+((cj0*new_r02)));
evalcond[7]=(((new_r11*sj0))+((cj0*new_r01)));
evalcond[8]=(((cj0*new_r00))+((new_r10*sj0)));
evalcond[9]=((((-1.0)*new_r10*x294))+(((-1.0)*new_r00*x293)));
evalcond[10]=((((-1.0)*new_r01*x293))+(((-1.0)*new_r11*x294)));
evalcond[11]=((1.0)+(((-1.0)*new_r12*x294))+(((-1.0)*new_r02*x293)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x296=IKcos(j2);
IkReal x297=IKsin(j2);
IkReal x298=((1.0)*x297);
IkReal x299=((-1.0)*x298);
IkReal x300=((1.0)*x296);
IkReal x301=((1.0)*new_r12);
evalcond[0]=(x296+new_r20);
evalcond[1]=(x299+new_r21);
evalcond[2]=(new_r01+((new_r12*x296)));
evalcond[3]=(((new_r12*x297))+new_r00);
evalcond[4]=(new_r11+(((-1.0)*new_r02*x300)));
evalcond[5]=((((-1.0)*new_r02*x298))+new_r10);
evalcond[6]=(x299+(((-1.0)*new_r00*x301))+((new_r02*new_r10)));
evalcond[7]=((((-1.0)*x300))+((new_r02*new_r11))+(((-1.0)*new_r01*x301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x302=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x303=((1.0)+((new_r12*sj0))+((cj0*new_r02)));
IkReal x304=(((new_r11*sj0))+((cj0*new_r01)));
IkReal x305=(((cj0*new_r00))+((new_r10*sj0)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj0+new_r02);
evalcond[3]=(sj0+new_r12);
evalcond[4]=x302;
evalcond[5]=x302;
evalcond[6]=x303;
evalcond[7]=x304;
evalcond[8]=x305;
evalcond[9]=x305;
evalcond[10]=x304;
evalcond[11]=x303;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x306=IKsin(j2);
IkReal x307=IKcos(j2);
IkReal x308=((1.0)*x307);
IkReal x309=((-1.0)*x308);
IkReal x310=((1.0)*x306);
IkReal x311=((1.0)*new_r02);
evalcond[0]=(x306+new_r21);
evalcond[1]=(x309+new_r20);
evalcond[2]=(((new_r02*x307))+new_r11);
evalcond[3]=(((new_r02*x306))+new_r10);
evalcond[4]=((((-1.0)*new_r12*x308))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x310))+new_r00);
evalcond[6]=((((-1.0)*x310))+((new_r00*new_r12))+(((-1.0)*new_r10*x311)));
evalcond[7]=(x309+(((-1.0)*new_r11*x311))+((new_r01*new_r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x312=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x313=(((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x312;
evalcond[7]=x312;
evalcond[8]=x313;
evalcond[9]=x313;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x314=((1.0)*new_r01);
if( IKabs(((((-1.0)*cj0*x314))+(((-1.0)*(1.0)*new_r00*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x314))+((cj0*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj0*x314))+(((-1.0)*(1.0)*new_r00*sj0))))+IKsqr(((((-1.0)*sj0*x314))+((cj0*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*cj0*x314))+(((-1.0)*(1.0)*new_r00*sj0))), ((((-1.0)*sj0*x314))+((cj0*new_r00))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x315=IKsin(j2);
IkReal x316=(cj0*x315);
IkReal x317=IKcos(j2);
IkReal x318=((1.0)*x317);
IkReal x319=((-1.0)*x318);
IkReal x320=((1.0)*sj0);
IkReal x321=((((-1.0)*cj0*x318))+((sj0*x315)));
evalcond[0]=(((new_r11*sj0))+((cj0*new_r01))+x315);
evalcond[1]=(((sj0*x317))+x316+new_r01);
evalcond[2]=(((cj0*new_r00))+x319+((new_r10*sj0)));
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x320))+(((-1.0)*x315)));
evalcond[4]=((((-1.0)*new_r01*x320))+x319+((cj0*new_r11)));
evalcond[5]=(x321+new_r00);
evalcond[6]=(x321+new_r11);
evalcond[7]=((((-1.0)*x317*x320))+new_r10+(((-1.0)*x316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x322=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x323=(cj0*new_r02);
IkReal x324=(new_r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x322;
evalcond[7]=x322;
evalcond[8]=(x324+x323);
evalcond[9]=((((-1.0)*x324))+(((-1.0)*x323)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x325=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj0*x325))+((cj0*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x325))+(((-1.0)*(1.0)*new_r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x325))+((cj0*new_r01))))+IKsqr(((((-1.0)*cj0*x325))+(((-1.0)*(1.0)*new_r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj0*x325))+((cj0*new_r01))), ((((-1.0)*cj0*x325))+(((-1.0)*(1.0)*new_r01*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x326=IKcos(j2);
IkReal x327=IKsin(j2);
IkReal x328=((1.0)*x327);
IkReal x329=((-1.0)*x328);
IkReal x330=(cj0*x326);
IkReal x331=((1.0)*sj0);
IkReal x332=(((sj0*x326))+(((-1.0)*cj0*x328)));
evalcond[0]=(((cj0*new_r00))+x326+((new_r10*sj0)));
evalcond[1]=(((new_r11*sj0))+((cj0*new_r01))+x329);
evalcond[2]=(((sj0*x327))+x330+new_r00);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x331))+x329);
evalcond[4]=((((-1.0)*new_r01*x331))+(((-1.0)*x326))+((cj0*new_r11)));
evalcond[5]=(x332+new_r01);
evalcond[6]=(x332+new_r10);
evalcond[7]=((((-1.0)*x327*x331))+(((-1.0)*x330))+new_r11);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x333=((1.0)*cj1);
IkReal x334=((((-1.0)*x333))+new_r22);
IkReal x335=((1.0)*sj1);
IkReal x336=((((-1.0)*x335))+new_r02);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x334;
evalcond[2]=x334;
evalcond[3]=x336;
evalcond[4]=new_r12;
evalcond[5]=x336;
evalcond[6]=(((cj1*new_r02))+(((-1.0)*new_r22*x335)));
evalcond[7]=((((-1.0)*new_r20*x333))+(((-1.0)*new_r00*x335)));
evalcond[8]=((((-1.0)*new_r01*x335))+(((-1.0)*new_r21*x333)));
evalcond[9]=((1.0)+(((-1.0)*new_r02*x335))+(((-1.0)*new_r22*x333)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r10, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x337=IKcos(j2);
IkReal x338=IKsin(j2);
IkReal x339=((1.0)*x337);
IkReal x340=((-1.0)*x339);
IkReal x341=((1.0)*new_r02);
evalcond[0]=(((new_r02*x337))+new_r20);
evalcond[1]=((((-1.0)*x338))+new_r10);
evalcond[2]=(new_r11+x340);
evalcond[3]=(((new_r22*x338))+new_r01);
evalcond[4]=((((-1.0)*x338*x341))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x339))+new_r00);
evalcond[6]=(((new_r01*new_r22))+x338+(((-1.0)*new_r21*x341)));
evalcond[7]=((((-1.0)*new_r20*x341))+((new_r00*new_r22))+x340);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x342=((1.0)*cj1);
IkReal x343=((((-1.0)*x342))+new_r22);
IkReal x344=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x343;
evalcond[2]=x343;
evalcond[3]=(sj1+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*new_r02))+(((-1.0)*x344)));
evalcond[6]=((((-1.0)*new_r22*x344))+(((-1.0)*new_r02*x342)));
evalcond[7]=(((new_r00*sj1))+(((-1.0)*new_r20*x342)));
evalcond[8]=(((new_r01*sj1))+(((-1.0)*new_r21*x342)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x342))+((new_r02*sj1)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x345 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x345.valid){
continue;
}
CheckValue<IkReal> x346=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x346.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x345.value)+(((1.5707963267949)*(x346.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x347=IKsin(j2);
IkReal x348=((1.0)*(IKcos(j2)));
IkReal x349=((-1.0)*x348);
IkReal x350=((1.0)*new_r01);
IkReal x351=((1.0)*new_r00);
evalcond[0]=(((new_r02*x347))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x348))+new_r20);
evalcond[2]=((((-1.0)*x347))+(((-1.0)*(1.0)*new_r10)));
evalcond[3]=(x349+(((-1.0)*(1.0)*new_r11)));
evalcond[4]=((((-1.0)*x350))+((new_r22*x347)));
evalcond[5]=((((-1.0)*x351))+(((-1.0)*new_r22*x348)));
evalcond[6]=(((new_r02*new_r21))+x347+(((-1.0)*new_r22*x350)));
evalcond[7]=((((-1.0)*new_r22*x351))+((new_r02*new_r20))+x349);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x353=IKPowWithIntegerCheck(sj1,-1);
if(!x353.valid){
continue;
}
IkReal x352=x353.value;
CheckValue<IkReal> x354=IKPowWithIntegerCheck(cj0,-1);
if(!x354.valid){
continue;
}
CheckValue<IkReal> x355=IKPowWithIntegerCheck(cj1,-1);
if(!x355.valid){
continue;
}
if( IKabs((x352*(x354.value)*(x355.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x352)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x352*(x354.value)*(x355.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0))))))+IKsqr(((-1.0)*new_r20*x352))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x352*(x354.value)*(x355.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0))))), ((-1.0)*new_r20*x352));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x356=IKcos(j2);
IkReal x357=IKsin(j2);
IkReal x358=((1.0)*sj1);
IkReal x359=(cj0*new_r01);
IkReal x360=(new_r11*sj0);
IkReal x361=(cj1*x357);
IkReal x362=((1.0)*sj0);
IkReal x363=((1.0)*x357);
IkReal x364=((1.0)*x356);
IkReal x365=((-1.0)*x364);
IkReal x366=(cj0*new_r00);
IkReal x367=(new_r10*sj0);
IkReal x368=(cj0*x364);
evalcond[0]=(((sj1*x356))+new_r20);
evalcond[1]=((((-1.0)*x357*x358))+new_r21);
evalcond[2]=(x359+x360+x361);
evalcond[3]=((((-1.0)*new_r00*x362))+((cj0*new_r10))+(((-1.0)*x363)));
evalcond[4]=((((-1.0)*new_r01*x362))+x365+((cj0*new_r11)));
evalcond[5]=(((cj0*x361))+new_r01+((sj0*x356)));
evalcond[6]=((((-1.0)*cj1*x364))+x367+x366);
evalcond[7]=((((-1.0)*cj1*x368))+new_r00+((sj0*x357)));
evalcond[8]=((((-1.0)*x368))+new_r11+((sj0*x361)));
evalcond[9]=((((-1.0)*cj1*x356*x362))+(((-1.0)*cj0*x363))+new_r10);
evalcond[10]=(((cj1*x360))+x357+(((-1.0)*new_r21*x358))+((cj1*x359)));
evalcond[11]=(((cj1*x366))+((cj1*x367))+x365+(((-1.0)*new_r20*x358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x371=IKPowWithIntegerCheck(sj1,-1);
if(!x371.valid){
continue;
}
IkReal x369=x371.value;
IkReal x370=((1.0)*new_r20);
CheckValue<IkReal> x372=IKPowWithIntegerCheck(sj0,-1);
if(!x372.valid){
continue;
}
if( IKabs((x369*(x372.value)*(((((-1.0)*cj0*cj1*x370))+(((-1.0)*(1.0)*new_r00*sj1)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x369*x370)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x369*(x372.value)*(((((-1.0)*cj0*cj1*x370))+(((-1.0)*(1.0)*new_r00*sj1))))))+IKsqr(((-1.0)*x369*x370))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x369*(x372.value)*(((((-1.0)*cj0*cj1*x370))+(((-1.0)*(1.0)*new_r00*sj1))))), ((-1.0)*x369*x370));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x373=IKcos(j2);
IkReal x374=IKsin(j2);
IkReal x375=((1.0)*sj1);
IkReal x376=(cj0*new_r01);
IkReal x377=(new_r11*sj0);
IkReal x378=(cj1*x374);
IkReal x379=((1.0)*sj0);
IkReal x380=((1.0)*x374);
IkReal x381=((1.0)*x373);
IkReal x382=((-1.0)*x381);
IkReal x383=(cj0*new_r00);
IkReal x384=(new_r10*sj0);
IkReal x385=(cj0*x381);
evalcond[0]=(((sj1*x373))+new_r20);
evalcond[1]=((((-1.0)*x374*x375))+new_r21);
evalcond[2]=(x378+x377+x376);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*x380))+(((-1.0)*new_r00*x379)));
evalcond[4]=(x382+(((-1.0)*new_r01*x379))+((cj0*new_r11)));
evalcond[5]=(((cj0*x378))+new_r01+((sj0*x373)));
evalcond[6]=(x384+x383+(((-1.0)*cj1*x381)));
evalcond[7]=(((sj0*x374))+(((-1.0)*cj1*x385))+new_r00);
evalcond[8]=((((-1.0)*x385))+((sj0*x378))+new_r11);
evalcond[9]=((((-1.0)*cj1*x373*x379))+(((-1.0)*cj0*x380))+new_r10);
evalcond[10]=(((cj1*x376))+(((-1.0)*new_r21*x375))+((cj1*x377))+x374);
evalcond[11]=((((-1.0)*new_r20*x375))+((cj1*x383))+((cj1*x384))+x382);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x386=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x386.valid){
continue;
}
CheckValue<IkReal> x387 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x387.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x386.value)))+(x387.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x388=IKcos(j2);
IkReal x389=IKsin(j2);
IkReal x390=((1.0)*sj1);
IkReal x391=(cj0*new_r01);
IkReal x392=(new_r11*sj0);
IkReal x393=(cj1*x389);
IkReal x394=((1.0)*sj0);
IkReal x395=((1.0)*x389);
IkReal x396=((1.0)*x388);
IkReal x397=((-1.0)*x396);
IkReal x398=(cj0*new_r00);
IkReal x399=(new_r10*sj0);
IkReal x400=(cj0*x396);
evalcond[0]=(((sj1*x388))+new_r20);
evalcond[1]=((((-1.0)*x389*x390))+new_r21);
evalcond[2]=(x392+x393+x391);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x394))+(((-1.0)*x395)));
evalcond[4]=(x397+(((-1.0)*new_r01*x394))+((cj0*new_r11)));
evalcond[5]=(((sj0*x388))+((cj0*x393))+new_r01);
evalcond[6]=(x398+x399+(((-1.0)*cj1*x396)));
evalcond[7]=(((sj0*x389))+(((-1.0)*cj1*x400))+new_r00);
evalcond[8]=(((sj0*x393))+(((-1.0)*x400))+new_r11);
evalcond[9]=(new_r10+(((-1.0)*cj0*x395))+(((-1.0)*cj1*x388*x394)));
evalcond[10]=((((-1.0)*new_r21*x390))+x389+((cj1*x392))+((cj1*x391)));
evalcond[11]=(x397+(((-1.0)*new_r20*x390))+((cj1*x398))+((cj1*x399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x401 = IKatan2WithCheck(IkReal(new_r12),new_r02,IKFAST_ATAN2_MAGTHRESH);
if(!x401.valid){
continue;
}
CheckValue<IkReal> x402=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x402.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x401.value)+(((1.5707963267949)*(x402.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x403=IKcos(j0);
IkReal x404=((1.0)*sj1);
IkReal x405=(x403*x404);
IkReal x406=IKsin(j0);
IkReal x407=(x404*x406);
IkReal x408=(new_r02*x403);
IkReal x409=(new_r12*x406);
IkReal x410=((1.0)*cj1);
evalcond[0]=((((-1.0)*x405))+new_r02);
evalcond[1]=((((-1.0)*x407))+new_r12);
evalcond[2]=(((new_r12*x403))+(((-1.0)*new_r02*x406)));
evalcond[3]=(x409+x408+(((-1.0)*x404)));
evalcond[4]=(((cj1*x409))+((cj1*x408))+(((-1.0)*new_r22*x404)));
evalcond[5]=((((-1.0)*new_r20*x410))+(((-1.0)*new_r10*x407))+(((-1.0)*new_r00*x405)));
evalcond[6]=((((-1.0)*new_r01*x405))+(((-1.0)*new_r21*x410))+(((-1.0)*new_r11*x407)));
evalcond[7]=((1.0)+(((-1.0)*x404*x409))+(((-1.0)*new_r22*x410))+(((-1.0)*x404*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j2eval[2];
IkReal x411=((1.0)*cj5);
IkReal x412=((1.0)*sj5);
IkReal x413=x125;
IkReal x414=((((-1.0)*r02*x411))+(((-1.0)*x412*x413)));
IkReal x415=((1.0)*sj3);
IkReal x416=((1.0)*sj6);
IkReal x417=x129;
IkReal x418=(((cj5*x413))+(((-1.0)*r02*x412)));
IkReal x419=(((cj4*x418))+((sj4*x417)));
IkReal x420=((1.0)*cj4);
IkReal x421=x133;
IkReal x422=((((-1.0)*x412*x421))+(((-1.0)*r12*x411)));
IkReal x423=x135;
IkReal x424=(((cj5*x421))+(((-1.0)*r12*x412)));
IkReal x425=(((cj4*x424))+((sj4*x423)));
IkReal x426=x138;
IkReal x427=((((-1.0)*x412*x426))+(((-1.0)*r22*x411)));
IkReal x428=x140;
IkReal x429=(((cj5*x426))+(((-1.0)*r22*x412)));
IkReal x430=(((sj4*x428))+((cj4*x429)));
new_r00=((((-1.0)*x415*x419))+((cj3*x414)));
new_r01=((((-1.0)*x417*x420))+((sj4*x418)));
new_r02=(((sj3*x414))+((cj3*x419)));
new_r10=((((-1.0)*x415*x425))+((cj3*x422)));
new_r11=((((-1.0)*x420*x423))+((sj4*x424)));
new_r12=(((sj3*x422))+((cj3*x425)));
new_r20=((((-1.0)*x415*x430))+((cj3*x427)));
new_r21=((((-1.0)*x420*x428))+((sj4*x429)));
new_r22=(((sj3*x427))+((cj3*x430)));
j2eval[0]=sj1;
j2eval[1]=IKsign(sj1);
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[2];
IkReal x431=((1.0)*cj5);
IkReal x432=((1.0)*sj5);
IkReal x433=x125;
IkReal x434=((((-1.0)*r02*x431))+(((-1.0)*x432*x433)));
IkReal x435=((1.0)*sj3);
IkReal x436=((1.0)*sj6);
IkReal x437=x129;
IkReal x438=(((cj5*x433))+(((-1.0)*r02*x432)));
IkReal x439=(((sj4*x437))+((cj4*x438)));
IkReal x440=((1.0)*cj4);
IkReal x441=x133;
IkReal x442=((((-1.0)*r12*x431))+(((-1.0)*x432*x441)));
IkReal x443=x135;
IkReal x444=(((cj5*x441))+(((-1.0)*r12*x432)));
IkReal x445=(((cj4*x444))+((sj4*x443)));
IkReal x446=x138;
IkReal x447=((((-1.0)*r22*x431))+(((-1.0)*x432*x446)));
IkReal x448=x140;
IkReal x449=(((cj5*x446))+(((-1.0)*r22*x432)));
IkReal x450=(((cj4*x449))+((sj4*x448)));
new_r00=(((cj3*x434))+(((-1.0)*x435*x439)));
new_r01=((((-1.0)*x437*x440))+((sj4*x438)));
new_r02=(((sj3*x434))+((cj3*x439)));
new_r10=((((-1.0)*x435*x445))+((cj3*x442)));
new_r11=(((sj4*x444))+(((-1.0)*x440*x443)));
new_r12=(((sj3*x442))+((cj3*x445)));
new_r20=(((cj3*x447))+(((-1.0)*x435*x450)));
new_r21=(((sj4*x449))+(((-1.0)*x440*x448)));
new_r22=(((cj3*x450))+((sj3*x447)));
j2eval[0]=sj0;
j2eval[1]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  )
{
{
IkReal j2eval[3];
IkReal x451=((1.0)*cj5);
IkReal x452=((1.0)*sj5);
IkReal x453=x125;
IkReal x454=((((-1.0)*x452*x453))+(((-1.0)*r02*x451)));
IkReal x455=((1.0)*sj3);
IkReal x456=((1.0)*sj6);
IkReal x457=x129;
IkReal x458=((((-1.0)*r02*x452))+((cj5*x453)));
IkReal x459=(((sj4*x457))+((cj4*x458)));
IkReal x460=((1.0)*cj4);
IkReal x461=x133;
IkReal x462=((((-1.0)*x452*x461))+(((-1.0)*r12*x451)));
IkReal x463=x135;
IkReal x464=(((cj5*x461))+(((-1.0)*r12*x452)));
IkReal x465=(((sj4*x463))+((cj4*x464)));
IkReal x466=x138;
IkReal x467=((((-1.0)*x452*x466))+(((-1.0)*r22*x451)));
IkReal x468=x140;
IkReal x469=(((cj5*x466))+(((-1.0)*r22*x452)));
IkReal x470=(((cj4*x469))+((sj4*x468)));
new_r00=((((-1.0)*x455*x459))+((cj3*x454)));
new_r01=((((-1.0)*x457*x460))+((sj4*x458)));
new_r02=(((cj3*x459))+((sj3*x454)));
new_r10=(((cj3*x462))+(((-1.0)*x455*x465)));
new_r11=(((sj4*x464))+(((-1.0)*x460*x463)));
new_r12=(((sj3*x462))+((cj3*x465)));
new_r20=(((cj3*x467))+(((-1.0)*x455*x470)));
new_r21=((((-1.0)*x460*x468))+((sj4*x469)));
new_r22=(((cj3*x470))+((sj3*x467)));
j2eval[0]=cj0;
j2eval[1]=cj1;
j2eval[2]=sj1;
if( IKabs(j2eval[0]) < 0.0000010000000000  || IKabs(j2eval[1]) < 0.0000010000000000  || IKabs(j2eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[12];
bool bgotonextstatement = true;
do
{
IkReal x471=((1.0)*cj1);
IkReal x472=(new_r22+(((-1.0)*x471)));
IkReal x473=((1.0)*sj1);
IkReal x474=((((-1.0)*x473))+new_r12);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x472;
evalcond[2]=x472;
evalcond[3]=new_r02;
evalcond[4]=x474;
evalcond[5]=x474;
evalcond[6]=((((-1.0)*new_r22*x473))+((cj1*new_r12)));
evalcond[7]=((((-1.0)*new_r10*x473))+(((-1.0)*new_r20*x471)));
evalcond[8]=((((-1.0)*new_r11*x473))+(((-1.0)*new_r21*x471)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x471))+(((-1.0)*new_r12*x473)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x475=IKPowWithIntegerCheck(IKsign(new_r12),-1);
if(!x475.valid){
continue;
}
CheckValue<IkReal> x476 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x476.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x475.value)))+(x476.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x477=IKcos(j2);
IkReal x478=IKsin(j2);
IkReal x479=((1.0)*new_r12);
IkReal x480=((1.0)*x477);
IkReal x481=((-1.0)*x480);
evalcond[0]=(((new_r12*x477))+new_r20);
evalcond[1]=(((new_r22*x478))+new_r11);
evalcond[2]=((((-1.0)*x478*x479))+new_r21);
evalcond[3]=((((-1.0)*new_r22*x480))+new_r10);
evalcond[4]=((((-1.0)*x478))+(((-1.0)*(1.0)*new_r00)));
evalcond[5]=((((-1.0)*(1.0)*new_r01))+x481);
evalcond[6]=(x478+((new_r11*new_r22))+(((-1.0)*new_r21*x479)));
evalcond[7]=(((new_r10*new_r22))+(((-1.0)*new_r20*x479))+x481);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x482=((1.0)*cj1);
IkReal x483=((((-1.0)*x482))+new_r22);
IkReal x484=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
evalcond[1]=x483;
evalcond[2]=x483;
evalcond[3]=new_r02;
evalcond[4]=(sj1+new_r12);
evalcond[5]=((((-1.0)*(1.0)*new_r12))+(((-1.0)*x484)));
evalcond[6]=((((-1.0)*new_r12*x482))+(((-1.0)*new_r22*x484)));
evalcond[7]=((((-1.0)*new_r20*x482))+((new_r10*sj1)));
evalcond[8]=(((new_r11*sj1))+(((-1.0)*new_r21*x482)));
evalcond[9]=((1.0)+((new_r12*sj1))+(((-1.0)*new_r22*x482)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r00, new_r01);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x485=IKsin(j2);
IkReal x486=((1.0)*(IKcos(j2)));
IkReal x487=((-1.0)*x486);
IkReal x488=((1.0)*new_r11);
IkReal x489=((1.0)*new_r10);
evalcond[0]=(((new_r12*x485))+new_r21);
evalcond[1]=((((-1.0)*x485))+new_r00);
evalcond[2]=(new_r01+x487);
evalcond[3]=(new_r20+(((-1.0)*new_r12*x486)));
evalcond[4]=(((new_r22*x485))+(((-1.0)*x488)));
evalcond[5]=((((-1.0)*new_r22*x486))+(((-1.0)*x489)));
evalcond[6]=(((new_r12*new_r21))+(((-1.0)*new_r22*x488))+x485);
evalcond[7]=(((new_r12*new_r20))+(((-1.0)*new_r22*x489))+x487);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x490=((1.0)*cj0);
IkReal x491=((1.0)*sj0);
IkReal x492=((((-1.0)*new_r02*x491))+((cj0*new_r12)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=((((-1.0)*x490))+new_r02);
evalcond[3]=((((-1.0)*x491))+new_r12);
evalcond[4]=x492;
evalcond[5]=x492;
evalcond[6]=((-1.0)+((new_r12*sj0))+((cj0*new_r02)));
evalcond[7]=(((new_r11*sj0))+((cj0*new_r01)));
evalcond[8]=(((cj0*new_r00))+((new_r10*sj0)));
evalcond[9]=((((-1.0)*new_r10*x491))+(((-1.0)*new_r00*x490)));
evalcond[10]=((((-1.0)*new_r11*x491))+(((-1.0)*new_r01*x490)));
evalcond[11]=((1.0)+(((-1.0)*new_r02*x490))+(((-1.0)*new_r12*x491)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*(((1.0)*new_r20)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*(((1.0)*new_r20))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r21, ((-1.0)*(((1.0)*new_r20))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x493=IKcos(j2);
IkReal x494=IKsin(j2);
IkReal x495=((1.0)*x494);
IkReal x496=((-1.0)*x495);
IkReal x497=((1.0)*x493);
IkReal x498=((1.0)*new_r12);
evalcond[0]=(x493+new_r20);
evalcond[1]=(x496+new_r21);
evalcond[2]=(((new_r12*x493))+new_r01);
evalcond[3]=(((new_r12*x494))+new_r00);
evalcond[4]=((((-1.0)*new_r02*x497))+new_r11);
evalcond[5]=((((-1.0)*new_r02*x495))+new_r10);
evalcond[6]=(((new_r02*new_r10))+x496+(((-1.0)*new_r00*x498)));
evalcond[7]=((((-1.0)*x497))+((new_r02*new_r11))+(((-1.0)*new_r01*x498)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x499=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x500=((1.0)+((new_r12*sj0))+((cj0*new_r02)));
IkReal x501=(((new_r11*sj0))+((cj0*new_r01)));
IkReal x502=(((cj0*new_r00))+((new_r10*sj0)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j1)))), 6.28318530717959)));
evalcond[1]=new_r22;
evalcond[2]=(cj0+new_r02);
evalcond[3]=(sj0+new_r12);
evalcond[4]=x499;
evalcond[5]=x499;
evalcond[6]=x500;
evalcond[7]=x501;
evalcond[8]=x502;
evalcond[9]=x502;
evalcond[10]=x501;
evalcond[11]=x500;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  && IKabs(evalcond[11]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((-1.0)*(((1.0)*new_r21)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(((1.0)*new_r21))))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((-1.0)*(((1.0)*new_r21))), new_r20);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x503=IKsin(j2);
IkReal x504=IKcos(j2);
IkReal x505=((1.0)*x504);
IkReal x506=((-1.0)*x505);
IkReal x507=((1.0)*x503);
IkReal x508=((1.0)*new_r02);
evalcond[0]=(x503+new_r21);
evalcond[1]=(x506+new_r20);
evalcond[2]=(((new_r02*x504))+new_r11);
evalcond[3]=(new_r10+((new_r02*x503)));
evalcond[4]=((((-1.0)*new_r12*x505))+new_r01);
evalcond[5]=((((-1.0)*new_r12*x507))+new_r00);
evalcond[6]=((((-1.0)*new_r10*x508))+((new_r00*new_r12))+(((-1.0)*x507)));
evalcond[7]=((((-1.0)*new_r11*x508))+x506+((new_r01*new_r12)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x509=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x510=(((new_r12*sj0))+((cj0*new_r02)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j1))), 6.28318530717959)));
evalcond[1]=((-1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x509;
evalcond[7]=x509;
evalcond[8]=x510;
evalcond[9]=x510;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x511=((1.0)*new_r01);
if( IKabs(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x511)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*sj0*x511))+((cj0*new_r00)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x511))))+IKsqr(((((-1.0)*sj0*x511))+((cj0*new_r00))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*(1.0)*new_r00*sj0))+(((-1.0)*cj0*x511))), ((((-1.0)*sj0*x511))+((cj0*new_r00))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x512=IKsin(j2);
IkReal x513=(cj0*x512);
IkReal x514=IKcos(j2);
IkReal x515=((1.0)*x514);
IkReal x516=((-1.0)*x515);
IkReal x517=((1.0)*sj0);
IkReal x518=(((sj0*x512))+(((-1.0)*cj0*x515)));
evalcond[0]=(((new_r11*sj0))+((cj0*new_r01))+x512);
evalcond[1]=(((sj0*x514))+x513+new_r01);
evalcond[2]=(((cj0*new_r00))+x516+((new_r10*sj0)));
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x517))+(((-1.0)*x512)));
evalcond[4]=((((-1.0)*new_r01*x517))+x516+((cj0*new_r11)));
evalcond[5]=(x518+new_r00);
evalcond[6]=(new_r11+x518);
evalcond[7]=((((-1.0)*x513))+(((-1.0)*x514*x517))+new_r10);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x519=((((-1.0)*(1.0)*new_r02*sj0))+((cj0*new_r12)));
IkReal x520=(cj0*new_r02);
IkReal x521=(new_r12*sj0);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j1)))), 6.28318530717959)));
evalcond[1]=((1.0)+new_r22);
evalcond[2]=new_r20;
evalcond[3]=new_r02;
evalcond[4]=new_r12;
evalcond[5]=new_r21;
evalcond[6]=x519;
evalcond[7]=x519;
evalcond[8]=(x521+x520);
evalcond[9]=((((-1.0)*x521))+(((-1.0)*x520)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x522=((1.0)*new_r00);
if( IKabs(((((-1.0)*sj0*x522))+((cj0*new_r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*x522))+(((-1.0)*(1.0)*new_r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*sj0*x522))+((cj0*new_r01))))+IKsqr(((((-1.0)*cj0*x522))+(((-1.0)*(1.0)*new_r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((-1.0)*sj0*x522))+((cj0*new_r01))), ((((-1.0)*cj0*x522))+(((-1.0)*(1.0)*new_r01*sj0))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x523=IKcos(j2);
IkReal x524=IKsin(j2);
IkReal x525=((1.0)*x524);
IkReal x526=((-1.0)*x525);
IkReal x527=(cj0*x523);
IkReal x528=((1.0)*sj0);
IkReal x529=((((-1.0)*cj0*x525))+((sj0*x523)));
evalcond[0]=(((cj0*new_r00))+((new_r10*sj0))+x523);
evalcond[1]=(((new_r11*sj0))+((cj0*new_r01))+x526);
evalcond[2]=(new_r00+((sj0*x524))+x527);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x528))+x526);
evalcond[4]=((((-1.0)*x523))+((cj0*new_r11))+(((-1.0)*new_r01*x528)));
evalcond[5]=(new_r01+x529);
evalcond[6]=(new_r10+x529);
evalcond[7]=(new_r11+(((-1.0)*x524*x528))+(((-1.0)*x527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x530=((1.0)*cj1);
IkReal x531=((((-1.0)*x530))+new_r22);
IkReal x532=((1.0)*sj1);
IkReal x533=(new_r02+(((-1.0)*x532)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
evalcond[1]=x531;
evalcond[2]=x531;
evalcond[3]=x533;
evalcond[4]=new_r12;
evalcond[5]=x533;
evalcond[6]=(((cj1*new_r02))+(((-1.0)*new_r22*x532)));
evalcond[7]=((((-1.0)*new_r20*x530))+(((-1.0)*new_r00*x532)));
evalcond[8]=((((-1.0)*new_r01*x532))+(((-1.0)*new_r21*x530)));
evalcond[9]=((1.0)+(((-1.0)*new_r22*x530))+(((-1.0)*new_r02*x532)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(new_r10, new_r11);
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x534=IKcos(j2);
IkReal x535=IKsin(j2);
IkReal x536=((1.0)*x534);
IkReal x537=((-1.0)*x536);
IkReal x538=((1.0)*new_r02);
evalcond[0]=(((new_r02*x534))+new_r20);
evalcond[1]=(new_r10+(((-1.0)*x535)));
evalcond[2]=(x537+new_r11);
evalcond[3]=(((new_r22*x535))+new_r01);
evalcond[4]=((((-1.0)*x535*x538))+new_r21);
evalcond[5]=((((-1.0)*new_r22*x536))+new_r00);
evalcond[6]=(x535+(((-1.0)*new_r21*x538))+((new_r01*new_r22)));
evalcond[7]=(x537+((new_r00*new_r22))+(((-1.0)*new_r20*x538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x539=((1.0)*cj1);
IkReal x540=((((-1.0)*x539))+new_r22);
IkReal x541=((1.0)*sj1);
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
evalcond[1]=x540;
evalcond[2]=x540;
evalcond[3]=(sj1+new_r02);
evalcond[4]=new_r12;
evalcond[5]=((((-1.0)*(1.0)*new_r02))+(((-1.0)*x541)));
evalcond[6]=((((-1.0)*new_r22*x541))+(((-1.0)*new_r02*x539)));
evalcond[7]=(((new_r00*sj1))+(((-1.0)*new_r20*x539)));
evalcond[8]=((((-1.0)*new_r21*x539))+((new_r01*sj1)));
evalcond[9]=((1.0)+((new_r02*sj1))+(((-1.0)*new_r22*x539)));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  )
{
bgotonextstatement=false;
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x542 = IKatan2WithCheck(IkReal(((-1.0)*(((1.0)*new_r21)))),new_r20,IKFAST_ATAN2_MAGTHRESH);
if(!x542.valid){
continue;
}
CheckValue<IkReal> x543=IKPowWithIntegerCheck(IKsign(new_r02),-1);
if(!x543.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(x542.value)+(((1.5707963267949)*(x543.value))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x544=IKsin(j2);
IkReal x545=((1.0)*(IKcos(j2)));
IkReal x546=((-1.0)*x545);
IkReal x547=((1.0)*new_r01);
IkReal x548=((1.0)*new_r00);
evalcond[0]=(((new_r02*x544))+new_r21);
evalcond[1]=((((-1.0)*new_r02*x545))+new_r20);
evalcond[2]=((((-1.0)*(1.0)*new_r10))+(((-1.0)*x544)));
evalcond[3]=((((-1.0)*(1.0)*new_r11))+x546);
evalcond[4]=((((-1.0)*x547))+((new_r22*x544)));
evalcond[5]=((((-1.0)*new_r22*x545))+(((-1.0)*x548)));
evalcond[6]=(((new_r02*new_r21))+(((-1.0)*new_r22*x547))+x544);
evalcond[7]=(((new_r02*new_r20))+(((-1.0)*new_r22*x548))+x546);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j2]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x550=IKPowWithIntegerCheck(sj1,-1);
if(!x550.valid){
continue;
}
IkReal x549=x550.value;
CheckValue<IkReal> x551=IKPowWithIntegerCheck(cj0,-1);
if(!x551.valid){
continue;
}
CheckValue<IkReal> x552=IKPowWithIntegerCheck(cj1,-1);
if(!x552.valid){
continue;
}
if( IKabs((x549*(x551.value)*(x552.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20*x549)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x549*(x551.value)*(x552.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0))))))+IKsqr(((-1.0)*new_r20*x549))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x549*(x551.value)*(x552.value)*(((((-1.0)*(1.0)*new_r01*sj1))+((new_r20*sj0))))), ((-1.0)*new_r20*x549));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x553=IKcos(j2);
IkReal x554=IKsin(j2);
IkReal x555=((1.0)*sj1);
IkReal x556=(cj0*new_r01);
IkReal x557=(new_r11*sj0);
IkReal x558=(cj1*x554);
IkReal x559=((1.0)*sj0);
IkReal x560=((1.0)*x554);
IkReal x561=((1.0)*x553);
IkReal x562=((-1.0)*x561);
IkReal x563=(cj0*new_r00);
IkReal x564=(new_r10*sj0);
IkReal x565=(cj0*x561);
evalcond[0]=(((sj1*x553))+new_r20);
evalcond[1]=((((-1.0)*x554*x555))+new_r21);
evalcond[2]=(x556+x557+x558);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*x560))+(((-1.0)*new_r00*x559)));
evalcond[4]=((((-1.0)*new_r01*x559))+((cj0*new_r11))+x562);
evalcond[5]=(((sj0*x553))+new_r01+((cj0*x558)));
evalcond[6]=((((-1.0)*cj1*x561))+x563+x564);
evalcond[7]=((((-1.0)*cj1*x565))+new_r00+((sj0*x554)));
evalcond[8]=((((-1.0)*x565))+new_r11+((sj0*x558)));
evalcond[9]=((((-1.0)*cj1*x553*x559))+(((-1.0)*cj0*x560))+new_r10);
evalcond[10]=((((-1.0)*new_r21*x555))+((cj1*x557))+x554+((cj1*x556)));
evalcond[11]=((((-1.0)*new_r20*x555))+((cj1*x564))+((cj1*x563))+x562);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x568=IKPowWithIntegerCheck(sj1,-1);
if(!x568.valid){
continue;
}
IkReal x566=x568.value;
IkReal x567=((1.0)*new_r20);
CheckValue<IkReal> x569=IKPowWithIntegerCheck(sj0,-1);
if(!x569.valid){
continue;
}
if( IKabs((x566*(x569.value)*(((((-1.0)*(1.0)*new_r00*sj1))+(((-1.0)*cj0*cj1*x567)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*x566*x567)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x566*(x569.value)*(((((-1.0)*(1.0)*new_r00*sj1))+(((-1.0)*cj0*cj1*x567))))))+IKsqr(((-1.0)*x566*x567))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((x566*(x569.value)*(((((-1.0)*(1.0)*new_r00*sj1))+(((-1.0)*cj0*cj1*x567))))), ((-1.0)*x566*x567));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x570=IKcos(j2);
IkReal x571=IKsin(j2);
IkReal x572=((1.0)*sj1);
IkReal x573=(cj0*new_r01);
IkReal x574=(new_r11*sj0);
IkReal x575=(cj1*x571);
IkReal x576=((1.0)*sj0);
IkReal x577=((1.0)*x571);
IkReal x578=((1.0)*x570);
IkReal x579=((-1.0)*x578);
IkReal x580=(cj0*new_r00);
IkReal x581=(new_r10*sj0);
IkReal x582=(cj0*x578);
evalcond[0]=(((sj1*x570))+new_r20);
evalcond[1]=((((-1.0)*x571*x572))+new_r21);
evalcond[2]=(x573+x575+x574);
evalcond[3]=(((cj0*new_r10))+(((-1.0)*new_r00*x576))+(((-1.0)*x577)));
evalcond[4]=(x579+(((-1.0)*new_r01*x576))+((cj0*new_r11)));
evalcond[5]=(((sj0*x570))+((cj0*x575))+new_r01);
evalcond[6]=((((-1.0)*cj1*x578))+x581+x580);
evalcond[7]=((((-1.0)*cj1*x582))+((sj0*x571))+new_r00);
evalcond[8]=(((sj0*x575))+(((-1.0)*x582))+new_r11);
evalcond[9]=((((-1.0)*cj1*x570*x576))+(((-1.0)*cj0*x577))+new_r10);
evalcond[10]=(((cj1*x573))+x571+(((-1.0)*new_r21*x572))+((cj1*x574)));
evalcond[11]=(x579+(((-1.0)*new_r20*x572))+((cj1*x580))+((cj1*x581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
CheckValue<IkReal> x583=IKPowWithIntegerCheck(IKsign(sj1),-1);
if(!x583.valid){
continue;
}
CheckValue<IkReal> x584 = IKatan2WithCheck(IkReal(new_r21),((-1.0)*(((1.0)*new_r20))),IKFAST_ATAN2_MAGTHRESH);
if(!x584.valid){
continue;
}
j2array[0]=((-1.5707963267949)+(((1.5707963267949)*(x583.value)))+(x584.value));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[12];
IkReal x585=IKcos(j2);
IkReal x586=IKsin(j2);
IkReal x587=((1.0)*sj1);
IkReal x588=(cj0*new_r01);
IkReal x589=(new_r11*sj0);
IkReal x590=(cj1*x586);
IkReal x591=((1.0)*sj0);
IkReal x592=((1.0)*x586);
IkReal x593=((1.0)*x585);
IkReal x594=((-1.0)*x593);
IkReal x595=(cj0*new_r00);
IkReal x596=(new_r10*sj0);
IkReal x597=(cj0*x593);
evalcond[0]=(((sj1*x585))+new_r20);
evalcond[1]=((((-1.0)*x586*x587))+new_r21);
evalcond[2]=(x589+x588+x590);
evalcond[3]=((((-1.0)*x592))+((cj0*new_r10))+(((-1.0)*new_r00*x591)));
evalcond[4]=((((-1.0)*new_r01*x591))+x594+((cj0*new_r11)));
evalcond[5]=(((cj0*x590))+new_r01+((sj0*x585)));
evalcond[6]=((((-1.0)*cj1*x593))+x596+x595);
evalcond[7]=((((-1.0)*cj1*x597))+new_r00+((sj0*x586)));
evalcond[8]=(((sj0*x590))+new_r11+(((-1.0)*x597)));
evalcond[9]=((((-1.0)*cj0*x592))+(((-1.0)*cj1*x585*x591))+new_r10);
evalcond[10]=(((cj1*x588))+((cj1*x589))+(((-1.0)*new_r21*x587))+x586);
evalcond[11]=((((-1.0)*new_r20*x587))+((cj1*x596))+x594+((cj1*x595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - sia5 (960d2d9ecfe14398ec1254f240543b9e)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000048"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
